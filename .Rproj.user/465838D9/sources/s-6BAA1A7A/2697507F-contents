####
library("Cairo")
library("cmdstanr")
library("data.table")
library("doParallel")
library("ggdist")
library("ggplot2")
library("ggpubr")
library("ggrepel")
library("kableExtra")
library("knitr")
library("parallel")
library("rnaturalearth")
library("rnaturalearthdata")
library("rstan")
library("sf")
library("zoolog")
#setting resources to do simulations with multicore processing (on Windows)
num_cores <- detectCores(logical = T)
cl <- makeCluster(num_cores - 4) #creating a virtual cluster
registerDoParallel(cl)

####SIMULATING THE ASSEMBLAGES####
####SET SEED: REMOVE TO GENERALIZE####
set.seed(1234567890)

sheep_data <- fread("./Data/1-s2.0-S0305440312000301-mmc1.csv", nrows = 356) #accessible from https://doi.org/10.1016/j.jas.2012.01.018 supplementary table, resaved as a .CSV

#Make variable for immature animals (`Days at Death` <= 365), female animals (not-immature), and male/castrated animals (not-immature)
sheep_data[, is.Immature := ifelse(`Days at Death` <= 365, 1, 0)]
sheep_data[, is.Female := ifelse(`Days at Death` > 365 & Sex %in% "Female", 1, 0)]
sheep_data[, is.Male := ifelse(`Days at Death` > 365 & Sex %in% c("Castrate", "Male"), 1, 0)]

#Reframe the sheep data to be set in a long format
sheep_longdata <- melt(sheep_data, id.vars = c("Accession  no", "Sex", "is.Immature", "is.Female", "is.Male", "Sca_coracoid_fus", "Hum_prox_fus", "Hum_dist_fus", "Rad_prox_fus", "Rad_dist_fus", "Mtc_dist_fus", "Pel_acetabulum_fus", "Fem_caput_fus", "Fem_dist_fus", "Tib_prox_fus", "Tib_dist_fus", "Mtt_dist_fus", "Cal_prox_fus"), measure.vars = names(sheep_data[, Sca_GLP:Cal_GDde]), variable.name = "Measurement", value.name = "Measurement_value")
sheep_longdata[, Element := tstrsplit(Measurement, "_")[1]]

#Get the standard animal from zoolog
sheep_standard_animal <- data.table(referencesDatabase$`Ovis orientalis`$Uerpmann)

#Keep only limb breadth bone measurements for the mixture model
sheep_mixmod_data <- sheep_longdata[Measurement %in% c("Sca_GLP", "Hum_Bd", "Hum_BT", "Rad_Bp", "Rad_Bd", "Mtc_Bp", "Mtc_BFd", "Fem_Bd", "Tib_Bd", "Ast_Bd", "Mtt_Bp", "Mtt_BFd")]

#Rename standard animal measurements to match the names in the dataset
sheep_standard_animal[EL %in% "Scapula", c("Element", "Measurement") := .("Sca", paste("Sca", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Humerus", c("Element", "Measurement") := .("Hum", paste("Hum", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Radius", c("Element", "Measurement") := .("Rad", paste("Rad", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Metacarpus", c("Element", "Measurement") := .("Mtc", paste("Mtc", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Femur", c("Element", "Measurement") := .("Fem", paste("Fem", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Tibia", c("Element", "Measurement") := .("Tib", paste("Tib", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Astragalus", c("Element", "Measurement") := .("Ast", paste("Ast", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Metatarsus", c("Element", "Measurement") := .("Mtt", paste("Mtt", Measure, sep = "_"))]

#Rename some measurement name mismatches
sheep_mixmod_data[Measurement %in% "Mtc_BFd", Measurement := "Mtc_Bd"]
sheep_mixmod_data[Measurement %in% "Mtt_BFd", Measurement := "Mtt_Bd"]

#Join the standard animal reference to the dataset (allows for easier identification of relevant standard measurement)
sheep_mixmod_data <- sheep_mixmod_data[sheep_standard_animal[, .(Measurement, Reference_value = Standard)], on = "Measurement"][!is.na(`Accession  no`)]

#Create "element portion" and "measurement set" numbers for the model (needs numeric labels)
#note that, by default, these are ordered alphabetically. Can also assign specific orders if desirable
sheep_mixmod_data[, c("Measurement_Set", "Element_Portion") := .(as.numeric(as.factor(Measurement)), as.numeric(as.factor(Element)))]

#Create "specimen" labels to link meausrements from the same bone specimen (model needs numeric labels)
sheep_mixmod_data[, "Specimen_No" := as.numeric(as.factor(paste(`Accession  no`, Element, sep = "_")))]
sheep_mixmod_data[, "Individual_No" := as.numeric(as.factor(`Accession  no`))]

#Immature: identify whether specimens COULD be immature based on element portion and fusion status, if relevant
sheep_mixmod_data[Element %in% c("Sca", "Ast"), Immature := 1] #does not fuse / subject to post-fusion growth and has no relevant fusion data to exclude immature status
sheep_mixmod_data[Element %in% c("Hum"), Immature := as.numeric(Hum_prox_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Rad", Immature := as.numeric(Rad_dist_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Mtc", Immature := as.numeric(Mtc_dist_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Fem", Immature := as.numeric(Fem_dist_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Tib", Immature := as.numeric(Tib_prox_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Mtt", Immature := as.numeric(Mtt_dist_fus %in% c("fu", "fg") == F)]

#Group: category for immature vs female vs male/castrate (for checking accuracy)
sheep_mixmod_data[, Group := ifelse(is.Immature %in% 1, "Immature", ifelse(is.Female %in% 1, "Female", ifelse(is.Male %in% 1, "Male", NA)))]
#Demographic information: collecting fusion data on proximal and middle phalanges and sex data on fused pelves
sheep_phx_fusion <- melt(sheep_data[, .(`Accession  no`, is.Immature, is.Female, is.Male, Pph_fore_int_fus, Pph_fore_ext_fus, Pph_dist_int_fus, Pph_dist_ext_fus, Mph_fore_int_fus, Mph_fore_ext_fus, Mph_dist_int_fus, Mph_dist_ext_fus)], id.vars = c("Accession  no", "is.Immature", "is.Female", "is.Male"), variable.name = "Phalanx", value.name = "Fusion")[Fusion %in% "na" == F]
sheep_phx_fusion[, Element := ifelse(grepl("Pph", Phalanx), "PH1", "PH2")]

sheep_pelvis_sex <- sheep_data[Pel_acetabulum_fus %in% "fu", .(`Accession  no`, is.Immature, is.Female, is.Male)][is.Immature %in% 0, .(`Accession  no`, Sex = ifelse(is.Female %in% 1, "Female", ifelse(is.Male %in% 1, "Male", NA)))]
```

```{r simulate the datasets, include = FALSE, eval = TRUE}
#Single assemblage simulation: 150 measured element portions, probabilities remain the same as the underlying population
single_assemblage_mixmod_data <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 150, replace = F)]
#Re-assign numeric codes for element portions, measurement sets, and individual specimens (to prevent mismatches/overlap)
single_assemblage_mixmod_data[, Measurement_Set := as.numeric(as.factor(Measurement))]
single_assemblage_mixmod_data[, Element_Portion := as.numeric(as.factor(Element))]
single_assemblage_mixmod_data[, Original_Specimen_No := Specimen_No] #allows the creation of modeled assemblages without resampling
single_assemblage_mixmod_data[, Specimen_No := as.numeric(as.factor(Specimen_No))]
single_assemblage_mixmod_data[, Site_No := 1]

#Multi-site simulation: 15 sites, varying sample size, expected composition, and body size manipulations
#Sites 1-5: no variation in composition to the underlying population
#Sites 6-10: 20% immature, 70% female, 10% male
#Sites 11-15: 5% immature, 35% female, 60% male
#Size variation in Sites 3-5, 8-10, and 13-15
#Sample sizes: N = 10 element portions in Sites 2, 7, and 12 (N = 30 element portions otherwise)

#straight from the data, 30 measured specimens
site_01 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
#straight from the data, 10 measured specimens
site_02 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 10, replace = F)]
#30 measured specimens, increase size
site_03 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
site_03[, Measurement_value := Measurement_value * 1.20]
#30 measured specimens, decrease size
site_04 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
site_04[, Measurement_value := Measurement_value * 0.80]
#30 measured specimens, increase sexual dimorphism
site_05 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
site_05[is.Male %in% 1, Measurement_value := Measurement_value * 1.20]

#20% immature, 70% female, 10% male
#have to adjust probabilities of choosing based on underlying proportions of the dataset
#20% immature, 70% female, 10% male; 30 measured specimens
site_06 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
#20% immature, 70% female, 10% male; 10 measured specimens
site_07 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 10, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
#20% immature, 70% female, 10% male; 30 measured specimens, increased size
site_08 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
site_08[, Measurement_value := Measurement_value * 1.20]
#20% immature, 70% female, 10% male; 30 measured specimens, decreased size
site_09 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
site_09[, Measurement_value := Measurement_value * 0.80]
#20% immature, 70% female, 10% male; 30 measured specimens, increased sexual dimorphism
site_10 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
site_10[is.Male %in% 1, Measurement_value := Measurement_value * 1.20]

#5% immature, 35% female, 60% male
#have to adjust probabilities of choosing based on underlying proportions of the dataset
#5% immature, 35% female, 60% male; 30 measured specimens
site_11 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
#5% immature, 35% female, 60% male; 10 measured specimens
site_12 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 10, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
#5% immature, 35% female, 60% male; 30 measured specimens, increased size
site_13 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
site_13[, Measurement_value := Measurement_value * 1.20]
#5% immature, 35% female, 60% male; 30 measured specimens, decreased size
site_14 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
site_14[, Measurement_value := Measurement_value * 0.80]
#5% immature, 35% female, 60% male; 30 measured specimens, increased sexual dimorphism
site_15 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
site_15[is.Male %in% 1, Measurement_value := Measurement_value * 1.20]

#Bring all the assemblages together
multisite_mixmod_data <- rbind(data.table(Site_No = 1, site_01),
                               data.table(Site_No = 2, site_02),
                               data.table(Site_No = 3, site_03),
                               data.table(Site_No = 4, site_04),
                               data.table(Site_No = 5, site_05),
                               data.table(Site_No = 6, site_06),
                               data.table(Site_No = 7, site_07),
                               data.table(Site_No = 8, site_08),
                               data.table(Site_No = 9, site_09),
                               data.table(Site_No = 10, site_10),
                               data.table(Site_No = 11, site_11),
                               data.table(Site_No = 12, site_12),
                               data.table(Site_No = 13, site_13),
                               data.table(Site_No = 14, site_14),
                               data.table(Site_No = 15, site_15))

#Re-assign numeric codes for element portions, measurement sets, and individual specimens (to prevent mismatches/overlap)
multisite_mixmod_data[, Measurement_Set := as.numeric(as.factor(Measurement))]
multisite_mixmod_data[, Element_Portion := as.numeric(as.factor(Element))]
multisite_mixmod_data[, Original_Specimen_No := Specimen_No] #allows the creation of modeled assemblages without resampling the measured specimens
multisite_mixmod_data[, Specimen_No := as.numeric(as.factor(paste(Site_No, Specimen_No, sep = ".")))]

##Demographic observations for the simulations: simulate observations from sheep_phx_fusion and sheep_pelvis_sex
#Single assemblage simulation
single_assemblage_demographic_observations <- data.table(Site = "Single Assemblage", Site_No = 1, N_Unfused = sheep_phx_fusion[sample(1:.N, 50)][Fusion %in% c("u", "fo"), .N], N_Ageable = 50, N_Female = sheep_pelvis_sex[sample(1:.N, 15)][Sex %in% "Female", .N], N_Sexable = 15)

#Multi-site simulation
multisite_demographic_observations <- rbind(
  data.table(Site = "Site 01", Site_No = 1, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 02", Site_No = 2, N_Unfused = sheep_phx_fusion[sample(1:.N, 10, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 15, N_Female = sheep_pelvis_sex[sample(1:.N, 4, replace = F)][Sex %in% "Female", .N], N_Sexable = 4),
  data.table(Site = "Site 03", Site_No = 3, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 04", Site_No = 4, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 05", Site_No = 5, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
  #20% immature, 70% female, 10% male
  data.table(Site = "Site 06", Site_No = 6, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 07", Site_No = 7, N_Unfused = sheep_phx_fusion[sample(1:.N, 10, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 15, N_Female = sheep_pelvis_sex[sample(1:.N, 4, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 4),
  data.table(Site = "Site 08", Site_No = 8, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 09", Site_No = 9, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 10", Site_No = 10, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
  #5% immature, 35% female, 60% male
  data.table(Site = "Site 11", Site_No = 11, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 12", Site_No = 12, N_Unfused = sheep_phx_fusion[sample(1:.N, 10, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 15, N_Female = sheep_pelvis_sex[sample(1:.N, 4, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 4),
  data.table(Site = "Site 13", Site_No = 13, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 14", Site_No = 14, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
  data.table(Site = "Site 15", Site_No = 15, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8)
)

#Simulate the modeled assemblages
#single assemblage simulation
single_measured_assemblage <- single_assemblage_mixmod_data[, .N, .(Individual_No, Specimen_No, Original_Specimen_No, Element, Element_Portion, Immature, Group, Site_No)]
single_modeled_assemblage <- rbind(single_measured_assemblage,
                                   sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% single_measured_assemblage[, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][, Specimen_No], 600, replace = F)][, .(Specimen_No = NA, Site_No = 1, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)])

#multisite assemblage simulation
multisite_measured_assemblage <- multisite_mixmod_data[, .N, .(Individual_No, Specimen_No, Original_Specimen_No, Element, Element_Portion, Immature, Group, Site_No)]
multisite_modeled_assemblage <- rbind(multisite_measured_assemblage,
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 1, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 1, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 2, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 40, replace = F)][, .(Specimen_No = NA, Site_No = 2, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 3, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 3, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 4, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 4, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 5, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 5, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      #Sites 6-10: 20% immature, 70% female, 10% male
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 6, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 6, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 6, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 7, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 40, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 7, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 7, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 8, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 8, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 8, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 9, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 9, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 9, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 10, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 10, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 10, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      #Sites 11-15: 5% immature, 35% female, 60% male
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 11, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 11, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 11, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 12, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 40, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 12, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 12, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 13, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 13, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 13, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 14, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 14, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 14, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
                                      sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 15, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 15, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 15, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)])

####RUNNING THE SINGLE ASSEMBLAGE MODEL####
single_assemblage_mixmod_standata <- list(
  #Sample sizes
  N_Specimens = single_assemblage_mixmod_data[, .N, Specimen_No][, .N],
  N_Measurements = single_assemblage_mixmod_data[, .N],
  N_Element_Portions = single_assemblage_mixmod_data[, .N, Element_Portion][, .N],
  N_Measurement_Sets = single_assemblage_mixmod_data[, .N, Measurement_Set][, .N],
  #Specimen observations
  Element_Portion = single_assemblage_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Element_Portion],
  Immature = single_assemblage_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Immature],
  Immature_Proportion = as.matrix(dcast(single_assemblage_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(single_assemblage_mixmod_data[, .N, Element_Portion][, .N] + 1)],
  #Measurement observations
  Measurement_obs = single_assemblage_mixmod_data[, Measurement_value],
  Measurement_sd = single_assemblage_mixmod_data[, Measurement_value * 0.01], #Calculate measurement error for observed measurements and reference data (1% based on data from Breslawksi and Byers 2015)
  Reference_obs = single_assemblage_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value],
  Reference_sd = single_assemblage_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value * 0.01],
  Measurement_Set = single_assemblage_mixmod_data[, Measurement_Set],
  Specimen = single_assemblage_mixmod_data[, Specimen_No],
  #Demographic observations
  Immature_obs = single_assemblage_demographic_observations[, N_Unfused],
  Immature_obs_n = single_assemblage_demographic_observations[, N_Ageable],
  Female_obs = single_assemblage_demographic_observations[, N_Female],
  Female_obs_n = single_assemblage_demographic_observations[, N_Sexable],
  #Prior distributions for hyper-parameters
  prior_theta_raw_1 = c(-0.5, 1.5),
  prior_theta_raw_2 = c(0, 1.5),
  prior_mu_female = c(0, 0.1),
  prior_logdelta_immature = c(-3.5, 0.4),
  prior_logdelta_male = c(-2.7, 0.1),
  prior_logsigma_immature = c(-3.05, 0.1),
  prior_logsigma_female = c(-3.1, 0.1),
  prior_logsigma_male = c(-3.1, 0.1)
)
singlesite_mixture_stanmodel <- cmdstan_model("./Scripts/LSI_mixture_model_singlesite.stan")
single_assemblage_samples <- singlesite_mixture_stanmodel$sample(
  data = single_assemblage_mixmod_standata,
  chains = 4,
  parallel_chains = 4,
  refresh = 250,
  seed = 1303894618, #change seed to generalize/if the data are changed
  adapt_delta = 0.90,
  max_treedepth = 15
)
single_assemblage_stanfit <- rstan::read_stan_csv(single_assemblage_samples$output_files())
single_assemblage_post <- extract(single_assemblage_stanfit)

####MULTISITE FIT####
#Multisite Analysis
multisite_mixmod_standata <- list(
  #Sample sizes
  N_Sites = multisite_mixmod_data[, .N, Site_No][, .N],
  N_Specimens = multisite_mixmod_data[, .N, Specimen_No][, .N],
  N_Measurements = multisite_mixmod_data[, .N],
  N_Element_Portions = multisite_mixmod_data[, .N, Element_Portion][, .N],
  N_Measurement_Sets = multisite_mixmod_data[, .N, Measurement_Set][, .N],
  #Specimen observations
  Site = multisite_mixmod_data[, .N, .(Specimen_No, Element_Portion, Site_No, Immature)][order(Specimen_No), Site_No],
  Element_Portion = multisite_mixmod_data[, .N, .(Specimen_No, Element_Portion, Site_No, Immature)][order(Specimen_No), Element_Portion],
  Immature = multisite_mixmod_data[, .N, .(Specimen_No, Element_Portion, Site_No, Immature)][order(Specimen_No), Immature],
  Immature_Proportion = as.matrix(dcast(multisite_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(multisite_mixmod_data[, .N, Element_Portion][, .N] + 1)],
  #Measurement observations
  Measurement_obs = multisite_mixmod_data[, Measurement_value],
  Measurement_sd = multisite_mixmod_data[, Measurement_value * 0.01], #Calculate measurement error for observed measurements and reference data (1% based on data from Breslawksi and Byers 2015)
  Reference_obs = multisite_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value],
  Reference_sd = multisite_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value * 0.01],
  Measurement_Set = multisite_mixmod_data[, Measurement_Set],
  Specimen = multisite_mixmod_data[, Specimen_No],
  #Demographic observations
  N_Immature_obs = multisite_demographic_observations[, .N],
  Immature_obs_site = multisite_demographic_observations[, Site_No],
  Immature_obs = multisite_demographic_observations[, N_Unfused],
  Immature_obs_n = multisite_demographic_observations[, N_Ageable],
  N_Female_obs = multisite_demographic_observations[, .N],
  Female_obs_site = multisite_demographic_observations[, Site_No],
  Female_obs = multisite_demographic_observations[, N_Female],
  Female_obs_n = multisite_demographic_observations[, N_Sexable],
  #Prior distributions for hyper-parameters
  prior_theta_raw_1 = c(-0.5, 1.5),
  prior_theta_raw_2 = c(0, 1.5),
  prior_mu_female = c(0, 0.2),
  prior_logdelta_immature = c(-3.5, 0.5),
  prior_logdelta_male = c(-2.7, 0.5),
  prior_logsigma_immature = c(-3.05, 0.25),
  prior_logsigma_female = c(-3.1, 0.2),
  prior_logsigma_male = c(-3.1, 0.2)
)
LSI_multisite_model <- cmdstan_model("./Scripts/LSI_mixture_model_multisite.stan")
multisite_samples <- LSI_multisite_model$sample(
  data = multisite_mixmod_standata,
  chains = 4,
  parallel_chains = 4,
  refresh = 250,
  adapt_delta = 0.80,
  seed = 1963899504,
  max_treedepth = 15
)
multisite_stanfit <- rstan::read_stan_csv(multisite_samples$output_files())
multisite_post <- extract(multisite_stanfit)

####POSTERIOR ANALYSIS####
parametric_accuracy <- function(true_values, posterior, single_assemblage = T, ci_limit = 0.95) {
  outcome_datatable <- data.table(CI_limit = ci_limit, Total = length(true_values) * true_values[, .N])
  if(single_assemblage) {
    accuracy <- sum(c(
      true_values[, p_immature] >= quantile(posterior$grand_theta[, 1], (1 - ci_limit) / 2) & true_values[, p_immature] <= quantile(posterior$grand_theta[, 1], 1 - (1 - ci_limit) / 2),
      true_values[, p_female] >= quantile(posterior$grand_theta[, 2], (1 - ci_limit) / 2) & true_values[, p_female] <= quantile(posterior$grand_theta[, 2], 1 - (1 - ci_limit) / 2),
      true_values[, p_male] >= quantile(posterior$grand_theta[, 3], (1 - ci_limit) / 2) & true_values[, p_male] <= quantile(posterior$grand_theta[, 3], 1 - (1 - ci_limit) / 2),
      #
      true_values[, mu_immature] >= quantile(posterior$grand_mu_immature, (1 - ci_limit) / 2) & true_values[, mu_immature] <= quantile(posterior$grand_mu_immature, 1 - (1 - ci_limit) / 2),
      true_values[, mu_female] >= quantile(posterior$grand_mu_female, (1 - ci_limit) / 2) & true_values[, mu_female] <= quantile(posterior$grand_mu_female, 1 - (1 - ci_limit) / 2),
      true_values[, mu_male] >= quantile(posterior$grand_mu_male, (1 - ci_limit) / 2) & true_values[, mu_male] <= quantile(posterior$grand_mu_male, 1 - (1 - ci_limit) / 2),
      #
      true_values[, sigma_immature] >= quantile(posterior$grand_sigma_immature, (1 - ci_limit) / 2) & true_values[, sigma_immature] <= quantile(posterior$grand_sigma_immature, 1 - (1 - ci_limit) / 2),
      true_values[, sigma_female] >= quantile(posterior$grand_sigma_female, (1 - ci_limit) / 2) & true_values[, sigma_female] <= quantile(posterior$grand_sigma_female, 1 - (1 - ci_limit) / 2),
      true_values[, sigma_male] >= quantile(posterior$grand_sigma_male, (1 - ci_limit) / 2) & true_values[, sigma_male] <= quantile(posterior$grand_sigma_male, 1 - (1 - ci_limit) / 2)
    ))
  }
  if(!single_assemblage) {
    accuracy <- sum(c(
      sapply(1:15, function(x) true_values[x, p_immature] >= quantile(posterior$site_theta[, 1, x], (1 - ci_limit) / 2) & true_values[x, p_immature] <= quantile(posterior$site_theta[, 1, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, p_female] >= quantile(posterior$site_theta[, 2, x], (1 - ci_limit) / 2) & true_values[x, p_female] <= quantile(posterior$site_theta[, 2, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, p_male] >= quantile(posterior$site_theta[, 3, x], (1 - ci_limit) / 2) & true_values[x, p_male] <= quantile(posterior$site_theta[, 3, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, mu_immature] >= quantile(posterior$site_mu_immature[, x], (1 - ci_limit) / 2) & true_values[x, mu_immature] <= quantile(posterior$site_mu_immature[, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, mu_female] >= quantile(posterior$site_mu_female[, x], (1 - ci_limit) / 2) & true_values[x, mu_female] <= quantile(posterior$site_mu_female[, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, mu_male] >= quantile(posterior$site_mu_male[, x], (1 - ci_limit) / 2) & true_values[x, mu_male] <= quantile(posterior$site_mu_male[, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, sigma_immature] >= quantile(posterior$site_sigma_immature[, x], (1 - ci_limit) / 2) & true_values[x, sigma_immature] <= quantile(posterior$site_sigma_immature[, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, sigma_female] >= quantile(posterior$site_sigma_female[, x], (1 - ci_limit) / 2) & true_values[x, sigma_female] <= quantile(posterior$site_sigma_female[, x], 1 - (1 - ci_limit) / 2)),
      sapply(1:15, function(x) true_values[x, sigma_male] >= quantile(posterior$site_sigma_male[, x], (1 - ci_limit) / 2) & true_values[x, sigma_male] <= quantile(posterior$site_sigma_male[, x], 1 - (1 - ci_limit) / 2))
    ))
  }
  outcome_datatable[, c("Accurate", "Rate") := .(sum(accuracy), round(sum(accuracy) / Total, 2))]
  outcome_datatable[, .(CI_limit, Accurate, Total, Rate)]
}
#parameters are from the Popkin, et al. (2012) Shetland sheep population
true_single_assemblage_parameters <- sheep_mixmod_data[, .(LSI = mean(log(Measurement_value / Reference_value))), .(Specimen_No, Group)][, .(p_immature = mean(Group %in% "Immature"), p_female = mean(Group %in% "Female"), p_male = mean(Group %in% "Male"), mu_immature = mean(LSI[Group %in% "Immature"]), mu_female = mean(LSI[Group %in% "Female"]), mu_male = mean(LSI[Group %in% "Male"]), sigma_immature = sd(LSI[Group %in% "Immature"]), sigma_female = sd(LSI[Group %in% "Female"]), sigma_male = sd(LSI[Group %in% "Male"]))]
#
true_multisite_parameters <- data.table(
  p_immature = rep(c(true_single_assemblage_parameters[, p_immature], 0.20, 0.05), each = 5),
  p_female = rep(c(true_single_assemblage_parameters[, p_female], 0.70, 0.35), each = 5),
  p_male = rep(c(true_single_assemblage_parameters[, p_male], 0.10, 0.60), each = 5),
  mu_immature = rep(true_single_assemblage_parameters[, mu_immature], 15),
  mu_female = rep(true_single_assemblage_parameters[, mu_female], 15),
  mu_male = rep(true_single_assemblage_parameters[, mu_male], 15),
  sigma_immature = rep(true_single_assemblage_parameters[, sigma_immature], 15),
  sigma_female = rep(true_single_assemblage_parameters[, sigma_female], 15),
  sigma_male = rep(true_single_assemblage_parameters[, sigma_male], 15)
)
#size modifications for different simulated assemblages
true_multisite_parameters[c(3, 8, 13), c("mu_immature", "mu_female", "mu_male") :=
                            .(sheep_mixmod_data[, .(Specimen_No, Group, LSI = log((Measurement_value * 1.20) / Reference_value))][, .(LSI = mean(LSI)), .(Specimen_No, Group)][Group %in% "Immature", mean(LSI)],
                              sheep_mixmod_data[, .(Specimen_No, Group, LSI = log((Measurement_value * 1.20) / Reference_value))][, .(LSI = mean(LSI)), .(Specimen_No, Group)][Group %in% "Female", mean(LSI)],
                              sheep_mixmod_data[, .(Specimen_No, Group, LSI = log((Measurement_value * 1.20) / Reference_value))][, .(LSI = mean(LSI)), .(Specimen_No, Group)][Group %in% "Male", mean(LSI)])]
true_multisite_parameters[c(4, 9, 14), c("mu_immature", "mu_female", "mu_male") :=
                            .(sheep_mixmod_data[, .(Specimen_No, Group, LSI = log((Measurement_value * 0.80) / Reference_value))][, .(LSI = mean(LSI)), .(Specimen_No, Group)][Group %in% "Immature", mean(LSI)],
                              sheep_mixmod_data[, .(Specimen_No, Group, LSI = log((Measurement_value * 0.80) / Reference_value))][, .(LSI = mean(LSI)), .(Specimen_No, Group)][Group %in% "Female", mean(LSI)],
                              sheep_mixmod_data[, .(Specimen_No, Group, LSI = log((Measurement_value * 0.80) / Reference_value))][, .(LSI = mean(LSI)), .(Specimen_No, Group)][Group %in% "Male", mean(LSI)])]
true_multisite_parameters[c(5, 10, 15), c("mu_male") :=
                            .(sheep_mixmod_data[, .(Specimen_No, Group, LSI = log((Measurement_value * 1.20) / Reference_value))][, .(LSI = mean(LSI)), .(Specimen_No, Group)][Group %in% "Male", mean(LSI)])]

#calculating accuracy only for site-level means
multisite_site_mu_80CI <- sum(c(
  sapply(1:15, function(x) true_multisite_parameters[x, mu_immature] >= quantile(multisite_post$site_mu_immature[, x], (1 - 0.8) / 2) & true_multisite_parameters[x, mu_immature] <= quantile(multisite_post$site_mu_immature[, x], 1 - (1 - 0.8) / 2)),
  sapply(1:15, function(x) true_multisite_parameters[x, mu_female] >= quantile(multisite_post$site_mu_female[, x], (1 - 0.8) / 2) & true_multisite_parameters[x, mu_female] <= quantile(multisite_post$site_mu_female[, x], 1 - (1 - 0.8) / 2)),
  sapply(1:15, function(x) true_multisite_parameters[x, mu_male] >= quantile(multisite_post$site_mu_male[, x], (1 - 0.8) / 2) & true_multisite_parameters[x, mu_male] <= quantile(multisite_post$site_mu_male[, x], 1 - (1 - 0.8) / 2))
))
multisite_site_mu_95CI <- sum(c(
  sapply(1:15, function(x) true_multisite_parameters[x, mu_immature] >= quantile(multisite_post$site_mu_immature[, x], (1 - 0.95) / 2) & true_multisite_parameters[x, mu_immature] <= quantile(multisite_post$site_mu_immature[, x], 1 - (1 - 0.95) / 2)),
  sapply(1:15, function(x) true_multisite_parameters[x, mu_female] >= quantile(multisite_post$site_mu_female[, x], (1 - 0.95) / 2) & true_multisite_parameters[x, mu_female] <= quantile(multisite_post$site_mu_female[, x], 1 - (1 - 0.95) / 2)),
  sapply(1:15, function(x) true_multisite_parameters[x, mu_male] >= quantile(multisite_post$site_mu_male[, x], (1 - 0.95) / 2) & true_multisite_parameters[x, mu_male] <= quantile(multisite_post$site_mu_male[, x], 1 - (1 - 0.95) / 2))
))
simulation_parameter_accuracy <- list(
  single_assemblage_80CI = parametric_accuracy(true_single_assemblage_parameters, single_assemblage_post, single_assemblage = T, ci_limit = 0.80)[, paste0(Accurate, " / ", Total, " (", 100 * Rate, "%)")],
  single_assemblage_95CI = parametric_accuracy(true_single_assemblage_parameters, single_assemblage_post, single_assemblage = T, ci_limit = 0.95)[, paste0(Accurate, " / ", Total, " (", 100 * Rate, "%)")],
  multisite_site_parameter_80CI = parametric_accuracy(true_multisite_parameters, multisite_post, single_assemblage = F, ci_limit = 0.80)[, paste0(Accurate, " / ", Total, " (", 100 * Rate, "%)")],
  multisite_site_parameter_95CI = parametric_accuracy(true_multisite_parameters, multisite_post, single_assemblage = F, ci_limit = 0.95)[, paste0(Accurate, " / ", Total, " (", 100 * Rate, "%)")],
  multisite_site_mu_80CI = paste0(multisite_site_mu_80CI, " / ", 45, " (", round(100 * multisite_site_mu_80CI / 45, 0), "%)"),
  multisite_site_mu_95CI = paste0(multisite_site_mu_95CI, " / ", 45, " (", round(100 * multisite_site_mu_95CI / 45, 0), "%)")
)

####COMPOSITION ANALYSIS####
#equations to simulate a specimen as immature/female/male and count up the composition
ifm_sample <- function(p_immature, p_female, p_male) {
  sample(c("Immature", "Female", "Male"), 1, replace = T, prob = c(p_immature, p_female, p_male))
}
#Simulates the composition of an assemblage with Immature/Female/male probabilities
ifm_composition <- function(measured_specimens) {
  #simulate sex assignments
  measured_specimens[, Simulated_Group := sapply(1:.N, function(x) ifm_sample(p_immature[x], p_female[x], p_male[x]))]
  #counts of the different elements by group (make sure there's a 0 if a value is missing)
  melt(measured_specimens[, .(`Immature` = sum(Simulated_Group %in% "Immature"),
                              `Female` = sum(Simulated_Group %in% "Female"),
                              `Male` = sum(Simulated_Group %in% "Male")), .(Site_No, Element_Portion, Element)], id.vars = c("Site_No", "Element_Portion", "Element"), variable.name = "Simulated_Group", value.name = "N")[order(Site_No, Element_Portion, Simulated_Group)]
}

theta_finder <- function(Specimen_No, Element_Portion, Immature, Immature_Proportions, element_thetas, specimen_probs) {
  thetas <- rep(NA, 3)
  immature_proportion <- Immature_Proportions[Portion %in% Element_Portion, Immature_Proportion]
  thetas[1:3] <- ifelse(rep(!is.na(Specimen_No), 3),
                        specimen_probs[Specimen_No, 1:3],
                        ifelse(rep(Immature == 1, 3),
                               c(element_thetas[1, Element_Portion] / immature_proportion,
                                 element_thetas[2, Element_Portion] * immature_proportion,
                                 element_thetas[3, Element_Portion] * immature_proportion),
                               c(0,
                                 element_thetas[2, Element_Portion] / (1 - min(c(element_thetas[1, Element_Portion], 0.99999))), #fail-safe for extreme values
                                 element_thetas[3, Element_Portion] / (1 - min(c(element_thetas[1, Element_Portion], 0.99999)))))
  )
  list(p_immature = thetas[1] / sum(thetas), p_female = thetas[2] / sum(thetas), p_male = thetas[3] / sum(thetas))
}

#

composition_analysis <- function(composition_data, true_data, site_no = 1, site_title = "") {
  ggplot(composition_data[Site_No %in% site_no, .(N = sum(N)), .(Iteration, Simulated_Group, Element, Element_Portion)][, .(Element, Element_Portion, group = Simulated_Group, Plot_Group = paste(Element, as.numeric(Simulated_Group), sep = "."), N)]) + aes(y = N, x = Plot_Group) +
    stat_slab(normalize = "groups", slab_type = "histogram", breaks = 0:(composition_data[Site_No %in% site_no, .(N = sum(N)), .(Iteration, Simulated_Group, Element, Element_Portion)][, max(N)]), aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(0.80, 0.95, 1), labels = scales::percent_format())))) +
    stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
    geom_segment(data = true_data[Site_No %in% site_no, .(Count = sum(Count)), .(Element, Element_Portion, Group)][, .(Element, Element_Portion, group = Group, Plot_Group = factor(paste(Element, as.numeric(factor(Group, levels = c("Immature", "Female", "Male"))), sep = ".")), N = Count)][, .(group, Plot_Group, x = as.numeric(Plot_Group) - 0.1, xend = as.numeric(Plot_Group) + 0.75, y = N, yend = N)], aes(x = x, xend = xend, y = y, yend = yend, color = group, linetype = "solid"), lwd = 1) +
    scale_fill_ramp_discrete(name = "Interval", range = c(0.5, 0.15), na.translate = F) +
    scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
    scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
    scale_x_discrete(name = "Element", breaks = composition_data[, .N, .(Element, Element_Portion)][order(Element_Portion), paste(Element, ".2", sep = "")], labels = composition_data[, .N, .(Full_Element_Name, Element_Portion)][order(Element_Portion), Full_Element_Name]) +
    scale_linetype_manual(name = "True Count", values = 1, labels = NULL) +
    scale_y_continuous(name = "Estimated Count") + coord_cartesian(expand = FALSE) +
    labs(title = site_title) +
    theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(angle = 90, size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 90, size = 10, hjust = 0.5))
}

####Determining the true composition of the measured and modeled assemblages####
single_measured_assemblage_composition <- melt(dcast(single_measured_assemblage[, .N, .(Site_No, Element, Original_Specimen_No, Element_Portion, Group)], Site_No + Group ~ Element_Portion, value.var = "N", fun.aggregate = length), id.vars = c("Group", "Site_No"), variable.name = "Element_Portion", value.name = "Count")
#ensure that every combination is present (add in 0s for missing combinations)
single_measured_assemblage_composition <- single_measured_assemblage_composition[data.table(Site_No = 1, Group = rep(c("Immature", "Female", "Male"), single_assemblage_mixmod_data[, .N, Element_Portion][, .N]), Element_Portion = factor(rep(1:single_assemblage_mixmod_data[, .N, Element_Portion][, .N], each = 3)), Element = rep(single_assemblage_mixmod_data[, .N, .(Element, Element_Portion)][order(Element_Portion), Element], each = 3)), on = c("Site_No", "Group", "Element_Portion")]
single_measured_assemblage_composition[is.na(Count), Count := 0]

#Single assemblage simulation (modeled)
single_modeled_assemblage_composition <- melt(dcast(single_modeled_assemblage[, .N, .(Site_No, Element, Original_Specimen_No, Element_Portion, Group)], Site_No + Group ~ Element_Portion, value.var = "N", fun.aggregate = length), id.vars = c("Group", "Site_No"), variable.name = "Element_Portion", value.name = "Count")
#ensure that every combination is present (add in 0s for missing combinations)
single_modeled_assemblage_composition <- single_modeled_assemblage_composition[data.table(Site_No = 1, Group = rep(c("Immature", "Female", "Male"), single_assemblage_mixmod_data[, .N, Element_Portion][, .N]), Element_Portion = factor(rep(1:single_assemblage_mixmod_data[, .N, Element_Portion][, .N], each = 3)), Element = rep(single_assemblage_mixmod_data[, .N, .(Element, Element_Portion)][order(Element_Portion), Element], each = 3)), on = c("Site_No", "Group", "Element_Portion")]
single_modeled_assemblage_composition[is.na(Count), Count := 0]
single_modeled_assemblage_composition

#
single_measured_assemblage_immature_proportions <- single_measured_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]
single_modeled_assemblage_immature_proportions <- single_modeled_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]
#
clusterExport(cl, list('data.table', 'melt', 'ifm_sample', 'theta_finder', 'ifm_composition', 'single_measured_assemblage', 'single_measured_assemblage_immature_proportions', 'single_modeled_assemblage', 'single_modeled_assemblage_immature_proportions', 'single_assemblage_post'))

single_measured_assemblage_simulated_composition <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_composition(single_measured_assemblage[, theta_finder(Specimen_No, Element_Portion, Immature, single_measured_assemblage_immature_proportions, element_thetas = single_assemblage_post$theta[x, , ], specimen_probs = single_assemblage_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 1, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)]))
single_modeled_assemblage_simulated_composition <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_composition(single_modeled_assemblage[, theta_finder(Specimen_No, Element_Portion, Immature, single_modeled_assemblage_immature_proportions, element_thetas = single_assemblage_post$theta[x, , ], specimen_probs = single_assemblage_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 1, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)]))

#
single_measured_assemblage_simulated_composition[Element %in% "Ast", Full_Element_Name := "Astragalus"]
single_measured_assemblage_simulated_composition[Element %in% "Fem", Full_Element_Name := "Femur"]
single_measured_assemblage_simulated_composition[Element %in% "Hum", Full_Element_Name := "Humerus"]
single_measured_assemblage_simulated_composition[Element %in% "Mtc", Full_Element_Name := "Metacarpus"]
single_measured_assemblage_simulated_composition[Element %in% "Mtt", Full_Element_Name := "Metatarsus"]
single_measured_assemblage_simulated_composition[Element %in% "Rad", Full_Element_Name := "Radius"]
single_measured_assemblage_simulated_composition[Element %in% "Sca", Full_Element_Name := "Scapula"]
single_measured_assemblage_simulated_composition[Element %in% "Tib", Full_Element_Name := "Tibia"]
#
single_modeled_assemblage_simulated_composition[Element %in% "Ast", Full_Element_Name := "Astragalus"]
single_modeled_assemblage_simulated_composition[Element %in% "Fem", Full_Element_Name := "Femur"]
single_modeled_assemblage_simulated_composition[Element %in% "Hum", Full_Element_Name := "Humerus"]
single_modeled_assemblage_simulated_composition[Element %in% "Mtc", Full_Element_Name := "Metacarpus"]
single_modeled_assemblage_simulated_composition[Element %in% "Mtt", Full_Element_Name := "Metatarsus"]
single_modeled_assemblage_simulated_composition[Element %in% "Rad", Full_Element_Name := "Radius"]
single_modeled_assemblage_simulated_composition[Element %in% "Sca", Full_Element_Name := "Scapula"]
single_modeled_assemblage_simulated_composition[Element %in% "Tib", Full_Element_Name := "Tibia"]


#Multisite composition analysis#
multisite_measured_assemblage_composition <- melt(dcast(multisite_measured_assemblage[, .N, .(Site_No, Element, Original_Specimen_No, Element_Portion, Group)], Site_No + Group ~ Element_Portion, value.var = "N", fun.aggregate = length), id.vars = c("Group", "Site_No"), variable.name = "Element_Portion", value.name = "Count")
#ensure that every combination is present (add in 0s for missing combinations)
multisite_measured_assemblage_composition <- multisite_measured_assemblage_composition[
  data.table(Site_No = rep(1:multisite_measured_assemblage[, .N, Site_No][, .N], each = 3), Group = rep(c("Immature", "Female", "Male"), multisite_measured_assemblage[, .N, Element_Portion][, .N] * multisite_measured_assemblage[, .N, Site_No][, .N]), Element_Portion = factor(rep(1:multisite_measured_assemblage[, .N, Element_Portion][, .N], each = 3 * multisite_measured_assemblage[, .N, Site_No][, .N])), Element = rep(multisite_measured_assemblage[, .N, .(Element, Element_Portion)][order(Element_Portion), Element], each = 3 * multisite_measured_assemblage[, .N, Site_No][, .N])),
  on = c("Site_No", "Group", "Element_Portion")]
multisite_measured_assemblage_composition[is.na(Count), Count := 0]

#Multisite simulation (modeled)
multisite_modeled_assemblage_composition <- melt(dcast(multisite_modeled_assemblage[, .N, .(Site_No, Element, Original_Specimen_No, Element_Portion, Group)], Site_No + Group ~ Element_Portion, value.var = "N", fun.aggregate = length), id.vars = c("Group", "Site_No"), variable.name = "Element_Portion", value.name = "Count")
#ensure that every combination is present (add in 0s for missing combinations)
multisite_modeled_assemblage_composition <- multisite_modeled_assemblage_composition[
  data.table(Site_No = rep(1:multisite_modeled_assemblage[, .N, Site_No][, .N], each = 3), Group = rep(c("Immature", "Female", "Male"), multisite_modeled_assemblage[, .N, Element_Portion][, .N] * multisite_modeled_assemblage[, .N, Site_No][, .N]), Element_Portion = factor(rep(1:multisite_modeled_assemblage[, .N, Element_Portion][, .N], each = 3 * multisite_modeled_assemblage[, .N, Site_No][, .N])), Element = rep(multisite_modeled_assemblage[, .N, .(Element, Element_Portion)][order(Element_Portion), Element], each = 3 * multisite_modeled_assemblage[, .N, Site_No][, .N])),
  on = c("Site_No", "Group", "Element_Portion")]
multisite_modeled_assemblage_composition[is.na(Count), Count := 0]

#Immature proportions
multisite_measured_assemblage_immature_proportions <- multisite_measured_assemblage[, .(Immature_Proportion = mean(Immature)), .(Site_No, Portion = Element_Portion)][order(Site_No, Portion)]
multisite_modeled_assemblage_immature_proportions <- multisite_modeled_assemblage[, .(Immature_Proportion = mean(Immature)), .(Site_No, Portion = Element_Portion)][order(Site_No, Portion)]
#
clusterExport(cl, list('data.table', 'melt', 'ifm_sample', 'theta_finder', 'ifm_composition', 'multisite_measured_assemblage', 'multisite_measured_assemblage_immature_proportions', 'multisite_modeled_assemblage', 'multisite_modeled_assemblage_immature_proportions', 'multisite_post'))

multisite_measured_assemblage_simulated_composition <- rbind(
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 1, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 1], element_thetas = multisite_post$theta[x, , 1, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 1, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 2, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 2], element_thetas = multisite_post$theta[x, , 2, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 2, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 3, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 3], element_thetas = multisite_post$theta[x, , 3, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 3, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 4, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 4], element_thetas = multisite_post$theta[x, , 4, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 4, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 5, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 5], element_thetas = multisite_post$theta[x, , 5, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 5, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 6, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 6], element_thetas = multisite_post$theta[x, , 6, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 6, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 7, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 7], element_thetas = multisite_post$theta[x, , 7, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 7, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 8, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 8], element_thetas = multisite_post$theta[x, , 8, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 8, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 9, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 9], element_thetas = multisite_post$theta[x, , 9, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 9, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 10, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 10], element_thetas = multisite_post$theta[x, , 10, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 10, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 11, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 11], element_thetas = multisite_post$theta[x, , 11, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 11, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 12, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 12], element_thetas = multisite_post$theta[x, , 12, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 12, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 13, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 13], element_thetas = multisite_post$theta[x, , 13, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 13, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 14, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 14], element_thetas = multisite_post$theta[x, , 14, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 14, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_measured_assemblage[Site_No %in% 15, theta_finder(Specimen_No, Element_Portion, Immature, multisite_measured_assemblage_immature_proportions[Site_No %in% 15], element_thetas = multisite_post$theta[x, , 15, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 15, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)]))
)
multisite_modeled_assemblage_simulated_composition <- rbind(
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 1, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 1], element_thetas = multisite_post$theta[x, , 1, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 1, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 2, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 2], element_thetas = multisite_post$theta[x, , 2, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 2, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 3, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 3], element_thetas = multisite_post$theta[x, , 3, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 3, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 4, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 4], element_thetas = multisite_post$theta[x, , 4, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 4, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 5, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 5], element_thetas = multisite_post$theta[x, , 5, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 5, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 6, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 6], element_thetas = multisite_post$theta[x, , 6, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 6, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 7, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 7], element_thetas = multisite_post$theta[x, , 7, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 7, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 8, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 8], element_thetas = multisite_post$theta[x, , 8, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 8, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 9, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 9], element_thetas = multisite_post$theta[x, , 9, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 9, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 10, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 10], element_thetas = multisite_post$theta[x, , 10, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 10, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 11, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 11], element_thetas = multisite_post$theta[x, , 11, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 11, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 12, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 12], element_thetas = multisite_post$theta[x, , 12, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 12, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 13, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 13], element_thetas = multisite_post$theta[x, , 13, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 13, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 14, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 14], element_thetas = multisite_post$theta[x, , 14, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 14, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)])),
  rbindlist(parLapply(cl = cl, 1:100, fun = function(x) ifm_composition(multisite_modeled_assemblage[Site_No %in% 15, theta_finder(Specimen_No, Element_Portion, Immature, multisite_modeled_assemblage_immature_proportions[Site_No %in% 15], element_thetas = multisite_post$theta[x, , 15, ], specimen_probs = multisite_post$specimen_prob[x, , ]), .(Original_Specimen_No, Specimen_No, Element, Element_Portion, Immature)][, .(Original_Specimen_No, Specimen_No, Site_No = 15, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)]))
)
#
multisite_measured_assemblage_simulated_composition[Element %in% "Ast", Full_Element_Name := "Astragalus"]
multisite_measured_assemblage_simulated_composition[Element %in% "Fem", Full_Element_Name := "Femur"]
multisite_measured_assemblage_simulated_composition[Element %in% "Hum", Full_Element_Name := "Humerus"]
multisite_measured_assemblage_simulated_composition[Element %in% "Mtc", Full_Element_Name := "Metacarpus"]
multisite_measured_assemblage_simulated_composition[Element %in% "Mtt", Full_Element_Name := "Metatarsus"]
multisite_measured_assemblage_simulated_composition[Element %in% "Rad", Full_Element_Name := "Radius"]
multisite_measured_assemblage_simulated_composition[Element %in% "Sca", Full_Element_Name := "Scapula"]
multisite_measured_assemblage_simulated_composition[Element %in% "Tib", Full_Element_Name := "Tibia"]
#
multisite_modeled_assemblage_simulated_composition[Element %in% "Ast", Full_Element_Name := "Astragalus"]
multisite_modeled_assemblage_simulated_composition[Element %in% "Fem", Full_Element_Name := "Femur"]
multisite_modeled_assemblage_simulated_composition[Element %in% "Hum", Full_Element_Name := "Humerus"]
multisite_modeled_assemblage_simulated_composition[Element %in% "Mtc", Full_Element_Name := "Metacarpus"]
multisite_modeled_assemblage_simulated_composition[Element %in% "Mtt", Full_Element_Name := "Metatarsus"]
multisite_modeled_assemblage_simulated_composition[Element %in% "Rad", Full_Element_Name := "Radius"]
multisite_modeled_assemblage_simulated_composition[Element %in% "Sca", Full_Element_Name := "Scapula"]
multisite_modeled_assemblage_simulated_composition[Element %in% "Tib", Full_Element_Name := "Tibia"]

####SUMMARIZE####
simulation_composition_accuracy <- list(
  single_assemblage_measured_80CI = single_measured_assemblage_simulated_composition[, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Element, Element_Portion, Simulated_Group)][single_measured_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  single_assemblage_measured_95CI = single_measured_assemblage_simulated_composition[, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.025), High = quantile(N, 0.975)), .(Element, Element_Portion, Simulated_Group)][single_measured_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_measured_combined_80CI = multisite_measured_assemblage_simulated_composition[Site_No %in% 1:15][, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Element, Element_Portion, Simulated_Group)][multisite_measured_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_measured_combined_95CI = multisite_measured_assemblage_simulated_composition[Site_No %in% 1:15][, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.025), High = quantile(N, 0.975)), .(Element, Element_Portion, Simulated_Group)][multisite_measured_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_measured_bysite_80CI = multisite_measured_assemblage_simulated_composition[, .(Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_measured_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group, True_N = Count)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][!is.na(Accurate), .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_measured_bysite_95CI = multisite_measured_assemblage_simulated_composition[, .(Low = quantile(N, 0.025), High = quantile(N, 0.975)), .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_measured_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group, True_N = Count)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][!is.na(Accurate), .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  #
  single_assemblage_modeled_80CI = single_modeled_assemblage_simulated_composition[, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Element, Element_Portion, Simulated_Group)][single_modeled_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  single_assemblage_modeled_95CI = single_modeled_assemblage_simulated_composition[, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.025), High = quantile(N, 0.975)), .(Element, Element_Portion, Simulated_Group)][single_modeled_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_modeled_combined_80CI = multisite_modeled_assemblage_simulated_composition[Site_No %in% 1:15][, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Element, Element_Portion, Simulated_Group)][multisite_modeled_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_modeled_combined_95CI = multisite_modeled_assemblage_simulated_composition[Site_No %in% 1:15][, .(N = sum(N)), .(Iteration, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][, .(Average = mean(N), Low = quantile(N, 0.025), High = quantile(N, 0.975)), .(Element, Element_Portion, Simulated_Group)][multisite_modeled_assemblage_composition[, .(True_N = sum(Count)), .(Element, Element_Portion, Simulated_Group = Group)], on = c("Element", "Element_Portion", "Simulated_Group")][, .(Element, Element_Portion, Simulated_Group, Average, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][, .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_modeled_bysite_80CI = multisite_modeled_assemblage_simulated_composition[, .(Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_modeled_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group, True_N = Count)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][!is.na(Accurate), .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_modeled_bysite_95CI = multisite_modeled_assemblage_simulated_composition[, .(Low = quantile(N, 0.025), High = quantile(N, 0.975)), .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_modeled_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group, True_N = Count)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)][!is.na(Accurate), .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  #
  multisite_modeled_newelements_N = multisite_measured_assemblage_simulated_composition[, .N, .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_measured_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, N)][multisite_modeled_assemblage_simulated_composition[, .(Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_modeled_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group, True_N = Count)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][is.na(N), .N, .(Site_No, Element)][, .N],
  multisite_modeled_newelements_80CI = multisite_measured_assemblage_simulated_composition[, .N, .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_measured_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, N)][multisite_modeled_assemblage_simulated_composition[, .(Low = quantile(N, 0.10), High = quantile(N, 0.90)), .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_modeled_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group, True_N = Count)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][is.na(N), .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")],
  multisite_modeled_newelements_95CI = multisite_measured_assemblage_simulated_composition[, .N, .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_measured_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, N)][multisite_modeled_assemblage_simulated_composition[, .(Low = quantile(N, 0.025), High = quantile(N, 0.975)), .(Site_No, Element, Element_Portion = as.factor(Element_Portion), Simulated_Group)][multisite_modeled_assemblage_composition[, .(Site_No, Element, Element_Portion, Simulated_Group = Group, True_N = Count)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][, .(Site_No, Element, Element_Portion, Simulated_Group, Low, High, True_N, Accurate = True_N >= Low & True_N <= High)], on = c("Site_No", "Element", "Element_Portion", "Simulated_Group")][is.na(N), .(Accurate = sum(Accurate), Total = .N, Accuracy_Rate = mean(Accurate))][, paste0(Accurate, " / ", Total, " (", round(100 * Accuracy_Rate, 0), "%)")]
)
##
multisite_pi_df <- data.table(site = rep(rep(multisite_demographic_observations[order(Site_No), Site], each = nrow(multisite_post$site_theta)), 3),
                              group = factor(rep(c("Immature", "Female", "Male"), each = 15 * nrow(multisite_post$site_theta)), levels = c("Immature", "Female", "Male")),
                              value = c(multisite_post$site_theta[, 1, ], multisite_post$site_theta[, 2, ], multisite_post$site_theta[, 3, ]))
multisite_pi_df[, plotting_group := paste(site, as.numeric(group), sep = ".")]
multisite_pi_true_df <- data.table(site = rep(multisite_demographic_observations[order(Site_No), Site], 3),
                                   group = factor(rep(c("Immature", "Female", "Male"), each = 15), levels = c("Immature", "Female", "Male")), x = 1:15, xend = 1:15 + 0.1, y = c(true_multisite_parameters[, p_immature], true_multisite_parameters[, p_female], true_multisite_parameters[, p_male]), yend = c(true_multisite_parameters[, p_immature], true_multisite_parameters[, p_female], true_multisite_parameters[, p_male]))
multisite_pi_true_df[, plotting_group := factor(paste(site, as.numeric(group), sep = "."))]
multisite_pi_true_df[, c("x", "xend") := .(as.numeric(plotting_group) - 0.1, as.numeric(plotting_group) + 0.75)]
#
multisite_pi_plot <- ggplot(multisite_pi_df) + aes(y = value, x = plotting_group) +
  stat_slab(normalize = "groups", aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
  geom_segment(data = multisite_pi_true_df, aes(x = x, xend = xend, y = y, yend = yend, color = group, linetype = "solid"), lwd = 1) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Site", breaks = sapply(1:15, function(x) paste(ifelse(x < 10, "Site 0", "Site "), x, ".2", sep = "")), labels = sapply(1:15, function(x) paste("Site ", x, sep = ""))) +
  scale_linetype_manual(name = "Population Value", values = 1, labels = NULL) +
  scale_y_continuous(name = "Proportion") + coord_cartesian(ylim = c(0, 1)) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 90, size = 10, hjust = 0.5))

multisite_sigma_df <- data.table(site = rep(rep(multisite_demographic_observations[order(Site_No), Site], each = nrow(multisite_post$site_theta)), 3),
                                 group = factor(rep(c("Immature", "Female", "Male"), each = 15 * nrow(multisite_post$site_theta)), levels = c("Immature", "Female", "Male")),
                                 value = c(multisite_post$site_sigma_immature, multisite_post$site_sigma_female, multisite_post$site_sigma_male))
multisite_sigma_df[, plotting_group := paste(site, as.numeric(group), sep = ".")]
multisite_sigma_true_df <- data.table(site = rep(multisite_demographic_observations[order(Site_No), Site], 3),
                                      group = factor(rep(c("Immature", "Female", "Male"), each = 15), levels = c("Immature", "Female", "Male")), x = 1:15, xend = 1:15 + 0.1, y = c(true_multisite_parameters[, sigma_immature], true_multisite_parameters[, sigma_female], true_multisite_parameters[, sigma_male]), yend = c(true_multisite_parameters[, sigma_immature], true_multisite_parameters[, sigma_female], true_multisite_parameters[, sigma_male]))
multisite_sigma_true_df[, plotting_group := factor(paste(site, as.numeric(group), sep = "."))]
multisite_sigma_true_df[, c("x", "xend") := .(as.numeric(plotting_group) - 0.1, as.numeric(plotting_group) + 0.75)]

multisite_sigma_plot <- ggplot(multisite_sigma_df) + aes(y = value, x = plotting_group) +
  stat_slab(normalize = "groups", aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
  geom_segment(data = multisite_sigma_true_df, aes(x = x, xend = xend, y = y, yend = yend, color = group, linetype = "solid"), lwd = 1) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Site", breaks = sapply(1:15, function(x) paste(ifelse(x < 10, "Site 0", "Site "), x, ".2", sep = "")), labels = sapply(1:15, function(x) paste("Site ", x, sep = ""))) +
  scale_linetype_manual(name = "Population Value", values = 1, labels = NULL) +
  scale_y_continuous(name = "LSI Mean Value") + coord_cartesian(ylim = c(0, 0.10)) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 90, size = 10, hjust = 0.5))


####FIGURE 5####
single_assemblage_p_immature_prior_samples <- boot::inv.logit(rnorm(4000, -0.5, 1.5) + log(0.5))
single_assemblage_p_immature_posterior_samples <- single_assemblage_post$p_immature
single_assemblage_p_immature_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_p_immature_prior_samples, single_assemblage_p_immature_posterior_samples))
#
single_assemblage_sex_ratio_prior_samples <- boot::inv.logit(rnorm(4000, 0, 1.5))
single_assemblage_sex_ratio_posterior_samples <- single_assemblage_post$theta_female
single_assemblage_sex_ratio_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_sex_ratio_prior_samples, single_assemblage_sex_ratio_posterior_samples))
#
single_assemblage_mu_female_prior_samples <- rnorm(4000, 0, 0.1)
single_assemblage_mu_female_posterior_samples <- single_assemblage_post$grand_mu_female
single_assemblage_mu_female_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_mu_female_prior_samples, single_assemblage_mu_female_posterior_samples))
#
single_assemblage_delta_immature_prior_samples <- exp(rnorm(4000, -3.5, 0.4))
single_assemblage_delta_immature_posterior_samples <- single_assemblage_post$grand_mu_female - single_assemblage_post$grand_mu_immature
single_assemblage_delta_immature_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_delta_immature_prior_samples, single_assemblage_delta_immature_posterior_samples))
#
single_assemblage_delta_male_prior_samples <- exp(rnorm(4000, -2.7, 0.1))
single_assemblage_delta_male_posterior_samples <- single_assemblage_post$grand_mu_male - single_assemblage_post$grand_mu_female
single_assemblage_delta_male_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_delta_male_prior_samples, single_assemblage_delta_male_posterior_samples))
#
single_assemblage_sigma_immature_prior_samples <- exp(rnorm(4000, -3.05, 0.1))
single_assemblage_sigma_immature_posterior_samples <- single_assemblage_post$grand_sigma_immature
single_assemblage_sigma_immature_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_sigma_immature_prior_samples, single_assemblage_sigma_immature_posterior_samples))
#
single_assemblage_sigma_female_prior_samples <- exp(rnorm(4000, -3.1, 0.1))
single_assemblage_sigma_female_posterior_samples <- single_assemblage_post$grand_sigma_female
single_assemblage_sigma_female_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_sigma_female_prior_samples, single_assemblage_sigma_female_posterior_samples))
#
single_assemblage_sigma_male_prior_samples <- exp(rnorm(4000, -3.1, 0.1))
single_assemblage_sigma_male_posterior_samples <- single_assemblage_post$grand_sigma_male
single_assemblage_sigma_male_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(single_assemblage_sigma_male_prior_samples, single_assemblage_sigma_male_posterior_samples))

#make the plots
single_assemblage_p_immature_plot <-
  ggplot(single_assemblage_p_immature_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Proportion Immature, ", pi[1])), x = "Proportion", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
single_assemblage_sex_ratio_plot <-
  ggplot(single_assemblage_sex_ratio_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Adult Sex Ratio, ", frac(pi[2], pi[2] + pi[3]))), x = "Proportion", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
single_assemblage_mu_female_plot <-
  ggplot(single_assemblage_mu_female_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Average Female LSI, ", mu[2])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
single_assemblage_delta_immature_plot <-
  ggplot(single_assemblage_delta_immature_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Immature Size Penalty, ", delta[1])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
single_assemblage_delta_male_plot <-
  ggplot(single_assemblage_delta_male_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Index of Sexual Dimorphism, ", delta[2])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
single_assemblage_sigma_immature_plot <-
  ggplot(single_assemblage_sigma_immature_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Immature Variability, ", sigma[1])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
single_assemblage_sigma_female_plot <-
  ggplot(single_assemblage_sigma_female_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Female Variability, ", sigma[2])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
single_assemblage_sigma_male_plot <-
  ggplot(single_assemblage_sigma_male_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Male Variability, ", sigma[3])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
figure_5 <- ggarrange(
  single_assemblage_p_immature_plot, single_assemblage_sex_ratio_plot,
  single_assemblage_mu_female_plot, single_assemblage_delta_immature_plot,
  single_assemblage_delta_male_plot, single_assemblage_sigma_immature_plot,
  single_assemblage_sigma_female_plot, single_assemblage_sigma_male_plot,
  ncol = 2, nrow = 4,
  common.legend = T, legend = "bottom")
figure_5

####FIGURE S5####
#Figure S5: prior and posterior comparison of multisite simulation hyper-parameters
#Collect the prior and posterior estimates
multisite_p_immature_prior_samples <- boot::inv.logit(rnorm(4000, -0.5, 1.5) + log(0.5))
multisite_p_immature_posterior_samples <- multisite_post$p_immature
multisite_p_immature_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_p_immature_prior_samples, multisite_p_immature_posterior_samples))
#
multisite_sex_ratio_prior_samples <- boot::inv.logit(rnorm(4000, 0, 1.5))
multisite_sex_ratio_posterior_samples <- multisite_post$theta_female
multisite_sex_ratio_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_sex_ratio_prior_samples, multisite_sex_ratio_posterior_samples))
#
multisite_mu_female_prior_samples <- rnorm(4000, 0, 0.2)
multisite_mu_female_posterior_samples <- multisite_post$grand_mu_female
multisite_mu_female_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_mu_female_prior_samples, multisite_mu_female_posterior_samples))
#
multisite_delta_immature_prior_samples <- exp(rnorm(4000, -3.5, 0.5))
multisite_delta_immature_posterior_samples <- multisite_post$grand_mu_female - multisite_post$grand_mu_immature
multisite_delta_immature_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_delta_immature_prior_samples, multisite_delta_immature_posterior_samples))
#
multisite_delta_male_prior_samples <- exp(rnorm(4000, -2.7, 0.5))
multisite_delta_male_posterior_samples <- multisite_post$grand_mu_male - multisite_post$grand_mu_female
multisite_delta_male_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_delta_male_prior_samples, multisite_delta_male_posterior_samples))
#
multisite_sigma_immature_prior_samples <- exp(rnorm(4000, -3.05, 0.25))
multisite_sigma_immature_posterior_samples <- multisite_post$grand_sigma_immature
multisite_sigma_immature_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_sigma_immature_prior_samples, multisite_sigma_immature_posterior_samples))
#
multisite_sigma_female_prior_samples <- exp(rnorm(4000, -3.1, 0.2))
multisite_sigma_female_posterior_samples <- multisite_post$grand_sigma_female
multisite_sigma_female_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_sigma_female_prior_samples, multisite_sigma_female_posterior_samples))
#
multisite_sigma_male_prior_samples <- exp(rnorm(4000, -3.1, 0.2))
multisite_sigma_male_posterior_samples <- multisite_post$grand_sigma_male
multisite_sigma_male_priorposterior_data <- data.table(quantity = rep(c("Prior", "Posterior"), each = 4000), value = c(multisite_sigma_male_prior_samples, multisite_sigma_male_posterior_samples))

#make the plots
multisite_p_immature_plot <-
  ggplot(multisite_p_immature_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Proportion Immature, ", pi[1])), x = "Proportion", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
multisite_sex_ratio_plot <-
  ggplot(multisite_sex_ratio_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Adult Sex Ratio, ", frac(pi[2], pi[2] + pi[3]))), x = "Proportion", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
multisite_mu_female_plot <-
  ggplot(multisite_mu_female_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Average Female LSI, ", mu[2])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
multisite_delta_immature_plot <-
  ggplot(multisite_delta_immature_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Immature Size Penalty, ", delta[1])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
multisite_delta_male_plot <-
  ggplot(multisite_delta_male_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Index of Sexual Dimorphism, ", delta[2])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
multisite_sigma_immature_plot <-
  ggplot(multisite_sigma_immature_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Immature Variability, ", sigma[1])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
multisite_sigma_female_plot <-
  ggplot(multisite_sigma_female_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Female Variability, ", sigma[2])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
multisite_sigma_male_plot <-
  ggplot(multisite_sigma_male_priorposterior_data) + aes(x = value, y = quantity) +
  stat_slab(normalize = "groups", aes(fill = quantity, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = quantity), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.7, 0.2), na.translate = F) +
  scale_color_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_fill_manual(name = "", values = c("red", "black"), na.translate = F) +
  scale_y_discrete(limits = c("Prior", "Posterior")) +
  labs(subtitle = expression(paste("Male Variability, ", sigma[3])), x = "LSI Value", y = "") +
  theme_classic() + theme(plot.title = element_text(size = 14), legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 14), axis.text.y = element_blank(), axis.ticks.y = element_blank())
#
figure_multisite_prior_posterior <- ggarrange(
  multisite_p_immature_plot, multisite_sex_ratio_plot,
  multisite_mu_female_plot, multisite_delta_immature_plot,
  multisite_delta_male_plot, multisite_sigma_immature_plot,
  multisite_sigma_female_plot, multisite_sigma_male_plot,
  ncol = 2, nrow = 4,
  common.legend = T, legend = "bottom")
#
figure_s5 <- annotate_figure(figure_multisite_prior_posterior, top = text_grob("Multisite Simulation", face = "bold", size = 14))
