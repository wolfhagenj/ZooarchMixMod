####Archaeological case studies: modeling Pinarbasi and Ilipinar####

#Import libraries#
library("cmdstanr")
library("data.table")
library("doParallel")
library("ggdist")
library("ggplot2")
library("ggpubr")
library("parallel")
library("rstan")
library("svglite")
library("zoolog")
#
#setting resources to do simulations with multicore processing (on Windows)
num_cores <- detectCores(logical = T)
cl <- makeCluster(num_cores - 4) #creating a virtual cluster
registerDoParallel(cl) #registering the cluster

####1. Import the data####
modeled_elements <- c("scapula", "humerus", "radius bone", "fused metacarpal bones 3 and 4", "femur", "tibia", "talus", "calcaneus", "fused metatarsal bones 3 and 4", "proximal phalanx")

#Barcin Hoyuk
barcin <- fread("./Data/Barcin Hoyuk Zooarchaeology Data (OpenContext - DOI 10.678-M7MS3QN7).csv")
#Have to include element names that are not in the modeled_elements categories because they're collapsed categories of multiple metacarpal/metatarsal identifications
barcin_data <- barcin[`Has Biological Taxonomy [Label]` %in% c("Bos taurus Linnaeus, 1758", "Bos primigenius") & `Has anatomical identification [Label]` %in% c(modeled_elements, "fused metacarpal bones 3 and 4; metacarpal bone of digit 3; metacarpal bone of digit 4; metacarpal bone of digit 5", "metatarsal bone of digit 5; metatarsal bone of digit 2; fused metatarsal bones 3 and 4", "middle phalanx"), .(ID = paste("Barcin", `Label`, sep = " "), Site = "Barcin", Taxon = `Has Biological Taxonomy [Label]`, Anatomy = `Has anatomical identification [Label]`, `Proximal Fusion` = `Has fusion character [Proximal Label]`, `Distal Fusion` = `Has fusion character [Distal Label]`, GLP = `Scap_glp`, Bd = ifelse(`Has anatomical identification [Label]` %in% "talus", Tal_bd, Bd), BT = NA, Bp = Bp, BFp = Bfp, DC = NA, GB = Gb)][!is.na(GLP) | !is.na(Bd) | !is.na(BT) | !is.na(Bp) | !is.na(BFp) | !is.na(DC) | !is.na(GB)]
barcin_data[ID %in% c("Barcin Bone 448", "Barcin Bone 358"), c("Bp") := NA] #anomalously small Bp measurements (17.2, 18.1); error in taxon coding?
#key between the "Anatomy" label from the original dataset and the "Element" label that will be used in the model
barcin_element_key <- data.table(`Anatomy Label` = c("scapula", "humerus", "radius bone", "fused metacarpal bones 3 and 4; metacarpal bone of digit 3; metacarpal bone of digit 4; metacarpal bone of digit 5", "femur", "tibia", "talus", "calcaneus", "metatarsal bone of digit 5; metatarsal bone of digit 2; fused metatarsal bones 3 and 4", "proximal phalanx", "middle phalanx"),
                                 `Element Label` = c("Sca", "Hum", "Rad", "Mtc", "Fem", "Tib", "Ast", "Cal", "Mtt", "PH1", "PH2"))

#Ilipinar
ilipinar <- fread("./Data/Ilipinar Zooarchaeology Main Zooarchaeological Dataset (OpenContext - DOI 10.6078-M72R3PM2).csv")
ilipinar_data <- ilipinar[`Has Biological Taxonomy [Label]` %in% c("Bos taurus Linnaeus, 1758", "Bos", "Bos primigenius") & `Period` %in% c("X", "IX", "IX/VIII", "VIII", "VII", "VI", "VI/VA", "VA", "VB") & `Has anatomical identification [Label]` %in% c(modeled_elements, "middle phalanx"), .(ID = paste("Ilipinar", `Label`, sep = " "), Site = ifelse(`Period` %in% c("X", "IX", "IX/VIII", "VIII"), "Ilipinar 1 (Late Neolithic/Transitional)", ifelse(`Period` %in% c("VII", "VI", "VI/VA", "VA", "VB"), "Ilipinar 2 (Early Chalcolithic)", NA)), Taxon = `Has Biological Taxonomy [Label]`, Anatomy = `Has anatomical identification [Label]`, `Proximal Fusion` = `Has fusion character [Proximal Label]`, `Distal Fusion` = `Has fusion character [Distal Label]`, GLP = GLP, Bd = ifelse(`Has anatomical identification [Label]` %in% c("fused metacarpal bones 3 and 4", "fused metatarsal bones 3 and 4"), `Bd (breadth of distal end- epi)`, `Bd`), BT = BT, Bp = Bp, BFp = BFp, DC = DC, GB = GB)][!is.na(GLP) | !is.na(Bd) | !is.na(BT) | !is.na(Bp) | !is.na(BFp) | !is.na(DC) | !is.na(GB)]
#troubleshooting some measurements
ilipinar_data[ID %in% "Ilipinar Bone 8029", c("Bp", "Bd") := .(NA, 68.8)] #originally listed as Bp
ilipinar_data[ID %in% "Ilipinar Bone 2706", c("Bd") := .(61.1)] #appears to be switched with SD (44.7)
ilipinar_data[ID %in% "Ilipinar Bone 1576", c("Bd") := .(45)] #appears to be switched with GLm (64.7)
ilipinar_data[ID %in% "Ilipinar Bone 2073", c("Bd") := NA] #appears to be a copy of GLm (63.2), unclear what original measurement was
ilipinar_data[ID %in% c("Ilipinar Bone 6592", "Ilipinar Bone 31126"), c("Bp") := NA] #Bp appears to be a copy of GLpe (58.6, 65.7)
ilipinar_data[ID %in% c("Ilipinar Bone 1813"), c("Bd") := NA] #Bd appears anomalously low; possibly typo on the anatomy?
ilipinar_data[ID %in% c("Ilipinar Bone 8680"), c("Bp", "BFp") := .(NA, NA)] #values are anomalously low and distant from one another, unclear if taxon or anatomy are correct (Bp = 55.3, BFp = 36.0)
ilipinar_data[ID %in% "Ilipinar Bone 20694", c("Bp") := 38.1] #switched with GL (66)
ilipinar_data[ID %in% "Ilipinar Bone 20427", c("Bp") := NA] #remove measurement (anomalously low), unclear if typo in measurement or taxon?
#key between the "Anatomy" label from the original dataset and the "Element" label that will be used in the model
ilipinar_element_key <- data.table(`Anatomy Label` = c("scapula", "humerus", "radius bone", "fused metacarpal bones 3 and 4", "femur", "tibia", "talus", "calcaneus", "fused metatarsal bones 3 and 4", "proximal phalanx", "middle phalanx"),
                                   `Element Label` = c("Sca", "Hum", "Rad", "Mtc", "Fem", "Tib", "Ast", "Cal", "Mtt", "PH1", "PH2"))

#Mentese
mentese <- fread("./Data/Neolithic Mentese Faunal Data Table (OpenContext - DOI 10.6078-M7MG7MD8).csv")
mentese_data <- mentese[`Has Biological Taxonomy [Label]` %in% "Bos" & `Has anatomical identification [Label]` %in% c(modeled_elements, "middle phalanx"), .(ID = paste("Mentese", `Label`, sep = " "), Site = "Mentese", Taxon = `Has Biological Taxonomy [Label]`, Anatomy = `Has anatomical identification [Label]`, `Proximal Fusion` = `Has fusion character [Proximal Label]`, `Distal Fusion` = `Has fusion character [Distal Label]`, GLP = GLP, Bd = Bd, BT = BT, Bp = Bp, BFp = BFp, DC = NA, GB = GB)][!is.na(GLP) | !is.na(Bd) | !is.na(BT) | !is.na(Bp) | !is.na(BFp) | !is.na(DC) | !is.na(GB)]
#troubleshooting a measurement
mentese_data[ID %in% "Mentese Bone 2403", Bp := 10.8] #Bp measurement is way too large relative to the Bd value (10.9); shifting to 10.8 seems more reasonable
mentese_data[Anatomy %in% "calcaneus", `Proximal Fusion` := ifelse(`Distal Fusion` %in% "Distal epiphysis unfused", "Proximal epiphysis unfused", ifelse(`Distal Fusion` %in% "Distal epiphysis fusing", "Proximal epiphysis fusing", ifelse(`Distal Fusion` %in% "Distal epiphysis fused", "Proximal epiphysis fused", ifelse(`Distal Fusion` %in% "", "", NA))))] #calcaneus fusion is listed as `Distal Fusion` but is `Proximal Fusion` in other sites/codes
#key between the "Anatomy" label from the original dataset and the "Element" label that will be used in the model
mentese_element_key <- data.table(`Anatomy Label` = c("scapula", "humerus", "radius bone", "fused metacarpal bones 3 and 4", "femur", "tibia", "talus", "calcaneus", "fused metatarsal bones 3 and 4", "proximal phalanx", "middle phalanx"),
                                  `Element Label` = c("Sca", "Hum", "Rad", "Mtc", "Fem", "Tib", "Ast", "Cal", "Mtt", "PH1", "PH2"))


#Pinarbasi
pinarbasi <- fread("./Data/Pinarbasi EOL Computational Data Challenge Revised Zooarchaeology Dataset (OpenContext - DOI 10.607-8M7X34VD1).csv")
#Have to include element names that are not in the modeled_elements categories because they're collapsed categories of multiple metacarpal/metatarsal identifications
pinarbasi_data <- pinarbasi[`Has Biological Taxonomy [Label]` %in% "Ovis" & `Context (3)` %in% "Site B" & `Has anatomical identification [Label]` %in% c(modeled_elements, "fused metacarpal bones 3 and 4; metacarpal bone of digit 1; metacarpal bone of digit 4; metacarpal bone of digit 5; metacarpal bone of digit 2; metacarpal bone; metacarpal bone of digit 3", "metatarsal bone of digit 2; metatarsal bone of digit 4; fused metatarsal bones 3 and 4; metatarsal bone of digit 3"), .(ID = paste("Pinarbasi B", `Label`, sep = " "), Site = "Pinarbasi B", Anatomy = `Has anatomical identification [Label]`, `Proximal Fusion` = ifelse(!is.na(`GB (unfused)`) | !is.na(`Bp (unfused)`), "Proximal epiphysis unfused", `Has fusion character [Proximal Label]`), `Distal Fusion` = ifelse(!is.na(`Bd (unfused)`), "Distal epiphysis unfused", `Has fusion character [Distal Label]`), GLP = NA, Bd = ifelse(!is.na(`Bd (unfused)`), `Bd (unfused)`, Bd), BT = NA, Bp = ifelse(!is.na(`Bp (unfused)`), `Bp (unfused)`, Bp), BFp = BFp, DC = NA, GB = ifelse(!is.na(`GB (unfused)`), `GB (unfused)`, GB))][!is.na(GLP) | !is.na(Bd) | !is.na(BT) | !is.na(Bp) | !is.na(BFp) | !is.na(DC) | !is.na(GB)]
#key between the "Anatomy" label from the original dataset and the "Element" label that will be used in the model
pinarbasi_element_key <- data.table(`Anatomy Label` = c("scapula", "humerus", "radius bone", "fused metacarpal bones 3 and 4; metacarpal bone of digit 1; metacarpal bone of digit 4; metacarpal bone of digit 5; metacarpal bone of digit 2; metacarpal bone; metacarpal bone of digit 3", "femur", "tibia", "talus", "calcaneus", "metatarsal bone of digit 2; metatarsal bone of digit 4; fused metatarsal bones 3 and 4; metatarsal bone of digit 3", "proximal phalanx"),
                                    `Element Label` = c("Sca", "Hum", "Rad", "Mtc", "Fem", "Tib", "Ast", "Cal", "Mtt", "PH1"))


#Reference animal ()
sheep_standard_animal <- data.table(referencesDatabase$`Ovis orientalis`$Uerpmann)
bos_standard_animal <- data.table(referencesDatabase$`Bos primigenius`$Degerbol)
#add in the measurement of the Scapula GLP (89.0 mm), Calcaneus GB (46.0 mm); Degerbol 1970: Table 13, Table 18
bos_standard_animal <- rbind(bos_standard_animal, data.table(TAX = rep("Bos primigenius", 2), EL = c("Scapula", "Calcaneus"), Measure = c("GLP", "GB"), Standard = c(89.0, 46)))
####2. Structuring the Datasets####

####Reference Data####
#Rename standard animal measurements to match the names in the dataset
sheep_standard_animal[EL %in% "Scapula", c("Element", "Measurement") := .("Sca", paste("Sca", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Humerus", c("Element", "Measurement") := .("Hum", paste("Hum", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Radius", c("Element", "Measurement") := .("Rad", paste("Rad", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Metacarpus", c("Element", "Measurement") := .("Mtc", paste("Mtc", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Femur", c("Element", "Measurement") := .("Fem", paste("Fem", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Tibia", c("Element", "Measurement") := .("Tib", paste("Tib", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Astragalus", c("Element", "Measurement") := .("Ast", paste("Ast", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Calcaneus", c("Element", "Measurement") := .("Cal", paste("Cal", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Metatarsus", c("Element", "Measurement") := .("Mtt", paste("Mtt", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Phalanx 1 ant.", c("Element", "Measurement") := .("PH1", paste("PH1", Measure, sep = "_"))]
#
bos_standard_animal[EL %in% "Scapula", c("Element", "Measurement") := .("Sca", paste("Sca", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Humerus", c("Element", "Measurement") := .("Hum", paste("Hum", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Radius", c("Element", "Measurement") := .("Rad", paste("Rad", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Metacarpus", c("Element", "Measurement") := .("Mtc", paste("Mtc", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Femur", c("Element", "Measurement") := .("Fem", paste("Fem", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Tibia", c("Element", "Measurement") := .("Tib", paste("Tib", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Astragalus", c("Element", "Measurement") := .("Ast", paste("Ast", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Calcaneus", c("Element", "Measurement") := .("Cal", paste("Cal", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Metatarsus", c("Element", "Measurement") := .("Mtt", paste("Mtt", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Phalanx 1 ant.", c("Element", "Measurement") := .("PH1", paste("PH1", Measure, sep = "_"))]
bos_standard_animal[EL %in% "Phalanx 2 ant.", c("Element", "Measurement") := .("PH1", paste("PH2", Measure, sep = "_"))]

#Function to restructure the measurement data into a format for the model
assemblage_restructure <- function(dataset, reference_dataset, element_key, included_measurements = c("Sca_GLP", "Hum_Bd", "Hum_BT", "Rad_Bp", "Rad_BFp", "Rad_Bd", "Mtc_Bp", "Mtc_Bd", "Fem_DC", "Fem_Bd", "Tib_Bp", "Tib_Bd", "Ast_Bd", "Cal_GB", "Mtt_Bp", "Mtt_Bd", "PH1_Bp")) {
  #Element: identify what end of the bone (proximal/distal) is included in the measurements (for element portions).
  #goes through element_key to change anatomical part names to the new labels
  #Note: key may have multiple Anatomy Labels that fit onto the same `Element Label`
  for(i in 1:nrow(element_key)) {
    dataset[Anatomy %in% element_key[i, `Anatomy Label`], Element := element_key[i, `Element Label`]]
    #Separate out proximal and distal element portions based on presence of later-fusing measurements (e.g., radius bone is proximal/distal based on presence of Bd measurement)
    if(element_key[i, `Element Label`] %in% c("Rad", "Mtc", "Fem", "Mtt")) {
      dataset[Anatomy %in% element_key[i, `Anatomy Label`], Element := ifelse(!is.na(Bd), paste(element_key[i, `Element Label`], "dist", sep = "_"), paste(element_key[i, `Element Label`], "prox", sep = "_"))]
    }
    if(element_key[i, `Element Label`] %in% c("Tib")) {
      dataset[Anatomy %in% element_key[i, `Anatomy Label`], Element := ifelse(!is.na(Bp), paste(element_key[i, `Element Label`], "prox", sep = "_"), paste(element_key[i, `Element Label`], "dist", sep = "_"))]
    }
  }
  #Immature: identify whether specimens COULD be immature based on element portion and fusion status, if relevant
  dataset[Element %in% c("Sca", "Ast"), Immature := 1] #does not fuse / subject to post-fusion growth and has no relevant fusion data to exclude immature status
  dataset[Element %in% c("Hum", "Cal", "PH1", "PH2"), Immature := as.numeric(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") == F)]
  dataset[Element %in% c("Rad_prox", "Rad_dist", "Mtc_prox", "Mtc_dist", "Mtt_prox", "Mtt_dist"), Immature := as.numeric(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing") == F)]
  dataset[Element %in% c("Fem_prox", "Fem_dist", "Tib_prox", "Tib_dist"), Immature := as.numeric((`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") | `Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing")) == F)]
  #transform into long-form data
  dataset_longdata <- melt(dataset, id.vars = c("ID", "Site", "Anatomy", "Element", "Proximal Fusion", "Distal Fusion", "Immature"), measure.vars = c("GLP", "Bd", "BT", "Bp", "BFp", "DC", "GB"), variable.name = "Measure", value.name = "Measurement_value")[!is.na(Measurement_value)]
  #Measurement: combine element and measurement names (for measurement sets)
  #goes through element_key to change anatomical part names to the new labels
  #Note: key may have mlutiple Anatomy Labels that fit onto the same `Element Label`
  for(i in 1:nrow(element_key)) {
    dataset_longdata[Anatomy %in% element_key[i, `Anatomy Label`], Measurement := paste(element_key[i, `Element Label`], Measure, sep = "_")]
  }
  #bring in the reference measurement for each value (joined by measurement) and limiting the assemblage to the measurements that we're interested in modeling
  mixmod_data <- dataset_longdata[reference_dataset[, .(Reference_value = Standard, Measurement)], on = c("Measurement")][!is.na(ID) & Measurement %in% included_measurements]
  #Create numeric labels for measurement sets, element portions, and specimens (for Stan modeling)
  mixmod_data[, Measurement_Set := as.numeric(as.factor(Measurement))]
  mixmod_data[, Element_Portion := as.numeric(as.factor(Element))]
  mixmod_data[, Specimen_No := as.numeric(as.factor(ID))]
  #return new dataset
  mixmod_data
}
measurement_list <- c("Sca_GLP", "Hum_Bd", "Hum_BT", "Rad_Bp", "Rad_BFp", "Rad_Bd", "Mtc_Bp", "Mtc_Bd", "Fem_DC", "Fem_Bd", "Tib_Bp", "Tib_Bd", "Ast_Bd", "Cal_GB", "Mtt_Bp", "Mtt_Bd", "PH1_Bp")
#
pinarbasi_mixmod_data <- assemblage_restructure(pinarbasi_data, sheep_standard_animal, pinarbasi_element_key, included_measurements = measurement_list)
#
barcin_mixmod_data <- assemblage_restructure(barcin_data, bos_standard_animal, barcin_element_key, included_measurements = c(measurement_list, "PH2_Bp"))
ilipinar_mixmod_data <- assemblage_restructure(ilipinar_data, bos_standard_animal, ilipinar_element_key, included_measurements = c(measurement_list, "PH2_Bp"))
mentese_mixmod_data <- assemblage_restructure(mentese_data, bos_standard_animal, mentese_element_key, included_measurements = c(measurement_list, "PH2_Bp"))

####3. Collecting the demographic data####
#Use sheep code and sheep/goat code (being liberal, taking all that aren't conclusively goats)
#This undoubtedly includes some goats, but the biases against unfused specimens (which are much more likely to be considered sheep/goat) is judged to be a bigger issue
#This is a modeling choice, however, so can be changed depending on the context
pinarbasi_demographic_observations <- pinarbasi[`Has Biological Taxonomy [Label]` %in% c("Ovis", "Sheep/goat") & `Context (3)` %in% c("Site B"), .(Site = "Pinarbasi B", N_Unfused = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "Proximal epiphysis unfused"), N_Ageable = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "" == F), N_Female = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% "female organism"), N_Sexable = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% c("female organism", "male organism")))]
#
barcin_demographic_observations <- barcin[`Has Biological Taxonomy [Label]` %in% c("Bos taurus Linnaeus, 1758", "Bos primigenius"), .(Site = "Barcin Hoyuk", N_Unfused = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "Proximal epiphysis unfused"), N_Ageable = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "" == F), N_Female = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% "female organism"), N_Sexable = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% c("female organism", "male organism")))]
ilipinar_demographic_observations <- ilipinar[`Has Biological Taxonomy [Label]` %in% c("Bos taurus Linnaeus, 1758", "Bos primigenius", "Bos") & `Period` %in% c("X", "IX", "IX/VIII", "VIII", "VII", "VI", "VI/VA", "VA", "VB"), .(N_Unfused = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "Proximal epiphysis unfused"), N_Ageable = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "" == F), N_Female = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% "female organism"), N_Sexable = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% c("female organism", "male organism"))), .(Site = ifelse(`Period` %in% c("X", "IX", "IX/VIII", "VIII"), "Ilipinar 1 (Late Neolithic/Transitional)", ifelse(`Period` %in% c("VII", "VI", "VI/VA", "VA", "VB"), "Ilipinar 2 (Early Chalcolithic)", NA)))][order(Site)]
mentese_demographic_observations <- mentese[`Has Biological Taxonomy [Label]` %in% c("Bos"), .(Site = "Mentese", N_Unfused = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "Proximal epiphysis unfused"), N_Ageable = sum(`Has anatomical identification [Label]` %in% c("proximal phalanx", "middle phalanx") & `Has fusion character [Proximal Label]` %in% "" == F), N_Female = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% "female organism"), N_Sexable = sum(`Has anatomical identification [Label]` %in% "innominate bone" & `Has physiological sex determination [Label]` %in% c("female organism", "male organism")))]

####Running the model: Pinarbasi B####
#add Site_No label to the measurement and demographic data
pinarbasi_mixmod_data[, Site_No := 1]
pinarbasi_demographic_observations[, Site_No := 1]
#
pinarbasi_mixmod_standata <- list(
  #Sample sizes
  N_Specimens = pinarbasi_mixmod_data[, .N, Specimen_No][, .N],
  N_Measurements = pinarbasi_mixmod_data[, .N],
  N_Element_Portions = pinarbasi_mixmod_data[, .N, Element_Portion][, .N],
  N_Measurement_Sets = pinarbasi_mixmod_data[, .N, Measurement_Set][, .N],
  #Specimen observations
  Element_Portion = pinarbasi_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Element_Portion],
  Immature = pinarbasi_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Immature],
  Immature_Proportion = as.matrix(dcast(pinarbasi_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(pinarbasi_mixmod_data[, .N, Element_Portion][, .N] + 1)],
  #Measurement observations
  Measurement_obs = pinarbasi_mixmod_data[, Measurement_value],
  Measurement_sd = pinarbasi_mixmod_data[, Measurement_value * 0.01],
  Reference_obs = pinarbasi_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value],
  Reference_sd = pinarbasi_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value * 0.01],
  Measurement_Set = pinarbasi_mixmod_data[, Measurement_Set],
  Specimen = pinarbasi_mixmod_data[, Specimen_No],
  #Demographic observations
  Immature_obs = pinarbasi_demographic_observations[, N_Unfused],
  Immature_obs_n = pinarbasi_demographic_observations[, N_Ageable],
  Female_obs = pinarbasi_demographic_observations[, N_Female],
  Female_obs_n = pinarbasi_demographic_observations[, N_Sexable],
  #Prior distributions for hyper-parameters
  prior_theta_raw_1 = c(-0.5, 1.5),
  prior_theta_raw_2 = c(0, 1.5),
  prior_mu_female = c(0, 0.1),
  prior_logdelta_immature = c(-3.5, 0.4),
  prior_logdelta_male = c(-2.7, 0.1),
  prior_logsigma_immature = c(-3.05, 0.1),
  prior_logsigma_female = c(-3.1, 0.1),
  prior_logsigma_male = c(-3.1, 0.1)
)

singlesite_mixture_stanmodel <- cmdstan_model("./Scripts/LSI_mixture_model_singlesite.stan")
pinarbasi_samples <- singlesite_mixture_stanmodel$sample(
  data = pinarbasi_mixmod_standata,
  chains = 4,
  parallel_chains = 4,
  refresh = 250,
  adapt_delta = 0.90,
  max_treedepth = 15
)
pinarbasi_samples$summary(c("grand_theta"))
pinarbasi_samples$summary(c("theta"))
pinarbasi_samples$summary(c("grand_mu_immature", "grand_mu_female", "grand_mu_male"))
pinarbasi_samples$summary(c("mu_female", "mu_male"))
pinarbasi_samples$summary(c("theta_female"))
pinarbasi_samples$summary(c("element_sigma"))

pinarbasi_stanfit <- rstan::read_stan_csv(pinarbasi_samples$output_files())
#plot(pinarbasi_stanfit, pars = "grand_theta")
traceplot(pinarbasi_stanfit, pars = "theta")
print(pinarbasi_stanfit, pars = "theta")
#
pinarbasi_post <- extract(pinarbasi_stanfit)

####Parametric analysis (Pinarbasi B)####
pinarbasi_element_name_key <- data.table(
  Element = c("Ast", "Cal", "Hum", "Mtc_dist", "Mtt_dist", "Mtt_prox", "PH1", "Rad_dist", "Tib_dist", "Tib_prox", "Rad_prox", "Mtc_prox", "Pel", "PH2", "Uln"),
  Full_Element_Name = c("Astragalus", "Calcaneus", "Humerus", "D. Metacarpal", "D. Metatarsal", "P. Metatarsal", "Proximal Phalanx", "D. Radius", "D. Tibia", "P. Tibia", "P. Radius", "P. Metacarpal", "Pelvis", "Middle Phalanx", "Ulna")
)

pinarbasi_pi_df <- data.table(Iteration = rep(1:4000, 3), 
                                       Group = rep(c("Immature", "Female", "Male"), each = 4000),
                                       theta = c(pinarbasi_post$grand_theta))
#
ggplot(pinarbasi_pi_df) + aes(y = theta, x = Group) +
  stat_slab(normalize = "groups", aes(fill = Group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Group), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = NULL, limits = c("Immature", "Female", "Male")) +
  scale_y_continuous(name = "Proportion", labels = scales::percent, limits = c(0, 1.02)) + coord_cartesian(expand = FALSE) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 0, size = 10, hjust = 0.5))

#
pinarbasi_element_pi_df <- data.table(Iteration = rep(rep(1:4000, 3), 10), 
                              Group = rep(rep(factor(c("Immature", "Female", "Male"), levels = c("Immature", "Female", "Male")), each = 4000), 10),
                              Element = rep(pinarbasi_mixmod_data[, .N, .(Element_Portion, Element)][order(Element_Portion), Element], each = 4000 * 3),
                              Element_Portion = rep(pinarbasi_mixmod_data[, .N, .(Element_Portion, Element)][order(Element_Portion), Element_Portion], each = 4000 * 3),
                              theta = c(pinarbasi_post$theta))
ggplot(pinarbasi_element_pi_df[, .(Iteration, Group, Element, Element_Portion, theta, Plot_Group = paste(Element, as.numeric(Group), sep = "."))]) + aes(y = theta, x = Plot_Group) +
  stat_slab(normalize = "groups", aes(fill = Group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Group), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Element", breaks = pinarbasi_element_pi_df[, .N, .(Element, Element_Portion)][order(Element_Portion), paste(Element, ".2", sep = "")], labels = pinarbasi_element_pi_df[, .N, .(Element, Element_Portion)][pinarbasi_element_name_key, on = "Element"][!is.na(Element_Portion)][order(Element_Portion), Full_Element_Name]) +
  scale_y_continuous(name = "Proportion", labels = scales::percent, limits = c(0, 1.02)) + coord_cartesian(expand = FALSE) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 0, size = 10, hjust = 0.5))

####Composition analysis (Pinarbasi B)####
#gather the different assemblages: measured assemblage, assemblage of modeled elements, full assemblage (including unmodeled elements)
pinarbasi_additional_elements <- c("innominate bone", "middle phalanx", "ulna") #additional elements for fusion analysis
pinarbasi_measured_assemblage <- pinarbasi_mixmod_data[, .N, .(ID, Specimen_No, Anatomy, Element, Element_Portion, Immature, `Proximal Fusion`, `Distal Fusion`)]
pinarbasi_modeled_assemblage <- pinarbasi[`Has Biological Taxonomy [Label]` %in% "Ovis" & `Context (3)` %in% "Site B" & `Has anatomical identification [Label]` %in% pinarbasi_measured_assemblage[, .N, Anatomy][, Anatomy], .(ID = paste("Pinarbasi B", `Label`, sep = " "), Site = "Pinarbasi B", Anatomy = `Has anatomical identification [Label]`, `Proximal Fusion` = ifelse(!is.na(`GB (unfused)`) | !is.na(`Bp (unfused)`), "Proximal epiphysis unfused", `Has fusion character [Proximal Label]`), `Distal Fusion` = ifelse(!is.na(`Bd (unfused)`), "Distal epiphysis unfused", `Has fusion character [Distal Label]`))]
pinarbasi_full_assemblage <- pinarbasi[`Has Biological Taxonomy [Label]` %in% "Ovis" & `Context (3)` %in% "Site B" & `Has anatomical identification [Label]` %in% c(pinarbasi_measured_assemblage[, .N, Anatomy][, Anatomy], pinarbasi_additional_elements), .(ID = paste("Pinarbasi B", `Label`, sep = " "), Site = "Pinarbasi B", Anatomy = `Has anatomical identification [Label]`, `Proximal Fusion` = ifelse(!is.na(`GB (unfused)`) | !is.na(`Bp (unfused)`), "Proximal epiphysis unfused", `Has fusion character [Proximal Label]`), `Distal Fusion` = ifelse(!is.na(`Bd (unfused)`), "Distal epiphysis unfused", `Has fusion character [Distal Label]`))]

#Assign specimen numbers for the specimens that were modeled directly (measured specimens) in the modeled and full assemblages
pinarbasi_modeled_assemblage <- pinarbasi_measured_assemblage[, .(ID, Specimen_No, Element_Portion, Immature)][pinarbasi_modeled_assemblage, on = "ID"]
pinarbasi_full_assemblage <- pinarbasi_measured_assemblage[, .(ID, Specimen_No, Element_Portion, Immature)][pinarbasi_full_assemblage, on = "ID"]

#Assign the element portion numbers for specimens whose element portions were modeled
pinarbasi_full_element_key <- rbind(pinarbasi_element_key,
                                    data.table(`Anatomy Label` = c("innominate bone", "middle phalanx", "ulna"), `Element Label` = c("Pel", "PH2", "Uln")))
for(i in 1:pinarbasi_full_element_key[, .N]) {
  pinarbasi_modeled_assemblage[Anatomy %in% pinarbasi_full_element_key[i, `Anatomy Label`], Element := pinarbasi_full_element_key[i, `Element Label`]]
  pinarbasi_full_assemblage[Anatomy %in% pinarbasi_full_element_key[i, `Anatomy Label`], Element := pinarbasi_full_element_key[i, `Element Label`]]
  #Separate out proximal and distal element portions based on presence of later-fusing measurements (e.g., radius bone is proximal/distal based on presence of Bd measurement)
  if(pinarbasi_full_element_key[i, `Element Label`] %in% c("Rad", "Mtc", "Fem", "Mtt")) {
    pinarbasi_modeled_assemblage[Anatomy %in% pinarbasi_full_element_key[i, `Anatomy Label`], Element := ifelse(`Distal Fusion` %in% "" == F, paste(pinarbasi_full_element_key[i, `Element Label`], "dist", sep = "_"), paste(pinarbasi_full_element_key[i, `Element Label`], "prox", sep = "_"))]
    pinarbasi_full_assemblage[Anatomy %in% pinarbasi_full_element_key[i, `Anatomy Label`], Element := ifelse(`Distal Fusion` %in% "" == F, paste(pinarbasi_full_element_key[i, `Element Label`], "dist", sep = "_"), paste(pinarbasi_full_element_key[i, `Element Label`], "prox", sep = "_"))]
  }
  if(pinarbasi_full_element_key[i, `Element Label`] %in% c("Tib")) {
    pinarbasi_modeled_assemblage[Anatomy %in% pinarbasi_full_element_key[i, `Anatomy Label`], Element := ifelse(`Proximal Fusion` %in% "" == F, paste(pinarbasi_full_element_key[i, `Element Label`], "prox", sep = "_"), paste(pinarbasi_full_element_key[i, `Element Label`], "dist", sep = "_"))]
    pinarbasi_full_assemblage[Anatomy %in% pinarbasi_full_element_key[i, `Anatomy Label`], Element := ifelse(`Proximal Fusion` %in% "" == F, paste(pinarbasi_full_element_key[i, `Element Label`], "prox", sep = "_"), paste(pinarbasi_full_element_key[i, `Element Label`], "dist", sep = "_"))]
  }
}
#Remove unobserved element portions (Rad_prox and Mtc_prox) from modeled assemblage
pinarbasi_modeled_assemblage <- pinarbasi_measured_assemblage[, .N, .(Element_Portion, Element)][, .(Element_Portion, Element)][pinarbasi_modeled_assemblage, on = "Element"][!is.na(Element_Portion)]
pinarbasi_full_assemblage <- pinarbasi_measured_assemblage[, .N, .(Element_Portion, Element)][, .(Element_Portion, Element)][pinarbasi_full_assemblage, on = "Element"]

#Assign new element portion numbers for unmodeled elements
pinarbasi_full_assemblage[Element %in% "Rad_prox", Element_Portion := 11]
pinarbasi_full_assemblage[Element %in% "Mtc_prox", Element_Portion := 12]
pinarbasi_full_assemblage[Element %in% "Pel", Element_Portion := 13]
pinarbasi_full_assemblage[Element %in% "PH2", Element_Portion := 14]
pinarbasi_full_assemblage[Element %in% "Uln", Element_Portion := 15]

#Get the Immature variable (potentially immature status based on fusion/tooth eruption)
pinarbasi_modeled_assemblage[is.na(Immature) & Element %in% c("Sca", "Ast"), Immature := 1] #does not fuse / subject to post-fusion growth and has no relevant fusion data to exclude immature status
pinarbasi_modeled_assemblage[is.na(Immature) & Element %in% c("Hum", "Cal", "PH1"), Immature := as.numeric(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") == F)]
pinarbasi_modeled_assemblage[is.na(Immature) & Element %in% c("Rad_prox", "Rad_dist", "Mtc_prox", "Mtc_dist", "Mtt_prox", "Mtt_dist"), Immature := as.numeric(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing") == F)]
pinarbasi_modeled_assemblage[is.na(Immature) & Element %in% c("Fem_prox", "Fem_dist", "Tib_prox", "Tib_dist"), Immature := as.numeric((`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") | `Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing")) == F)]
#
pinarbasi_full_assemblage[is.na(Immature) & Element %in% c("Sca", "Ast"), Immature := 1] #does not fuse / subject to post-fusion growth and has no relevant fusion data to exclude immature status
pinarbasi_full_assemblage[is.na(Immature) & Element %in% c("Hum", "Cal", "PH1", "PH2"), Immature := as.numeric(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") == F)]
pinarbasi_full_assemblage[is.na(Immature) & Element %in% c("Rad_prox", "Rad_dist", "Mtc_prox", "Mtc_dist", "Mtt_prox", "Mtt_dist"), Immature := as.numeric(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing") == F)]
pinarbasi_full_assemblage[is.na(Immature) & Element %in% c("Uln", "Pel", "Fem_prox", "Fem_dist", "Tib_prox", "Tib_dist"), Immature := as.numeric((`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") | `Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing")) == F)]

####Composition analysis: simulate the composition of the assemblage(s) by sampling from probabilities####
#for measured specimens (with Specimen_No): the specific probabilities for that specimen
#for modeled specimens (no Specimen_No but has relevant Element_Portion): the probabilities for that Element_Portion (theta[1:3])
#for unmodeled specimens (no relevant Element_Portion): calculate new element_portion-specific theta values using the hyper-parameters

#Calculating five new sets of element_portion-specific mixing probabilities for unmodeled element portions
pinarbasi_unmodeled_element_portion_theta <- data.table(Iteration = rep(1:4000, 5),
                                                        Element_Portion = rep(11:15, each = 4000),
                                                        Element = rep(c("Rad_prox", "Mtc_prox", "Man", "Uln", "Pel"), each = 4000))
#specify hyper-parameter values for the model
for(i in 1:5) {
  element_theta_raw <- t(sapply(1:4000, function(x) MASS::mvrnorm(1, mu = pinarbasi_post$grand_theta_raw[x, 1:2], Sigma = diag(pinarbasi_post$element_sigma[x, 1:2]) %*% pinarbasi_post$Rho_element[x, 1:2, 1:2] %*% diag(pinarbasi_post$element_sigma[x, 1:2]))))
  pinarbasi_unmodeled_element_portion_theta[(4000 * (i - 1) + 1):(4000 * i), c("theta_raw_1", "theta_raw_2") := .(element_theta_raw[, 1], element_theta_raw[, 2])]
}
#perform stick-breaking procedure to turn theta_raw into theta values
pinarbasi_unmodeled_element_portion_theta[, theta_1 := boot::inv.logit(theta_raw_1 + log(0.5))]
pinarbasi_unmodeled_element_portion_theta[, theta_2 := (1 - theta_1) * boot::inv.logit(theta_raw_2 + log(1))]
pinarbasi_unmodeled_element_portion_theta[, theta_3 := (1 - (theta_1 + theta_2))]

#equations to simulate a specimen as immature/female/male and count up the composition
ifm_sample <- function(p_immature, p_female, p_male) {
  sample(c("Immature", "Female", "Male"), 1, replace = T, prob = c(p_immature, p_female, p_male))
}
#Simulates the composition of an assemblage with Immature/Female/male probabilities
ifm_composition <- function(measured_specimens) {
  #simulate sex assignments
  measured_specimens[, Simulated_Group := sapply(1:.N, function(x) ifm_sample(p_immature[x], p_female[x], p_male[x]))]
  #counts of the different elements by group (make sure there's a 0 if a value is missing)
  melt(measured_specimens[, .(`Immature` = sum(Simulated_Group %in% "Immature"),
                              `Female` = sum(Simulated_Group %in% "Female"),
                              `Male` = sum(Simulated_Group %in% "Male")), .(Site_No, Element_Portion, Element)], id.vars = c("Site_No", "Element_Portion", "Element"), variable.name = "Simulated_Group", value.name = "N")[order(Site_No, Element_Portion, Simulated_Group)]
}

#
composition_analysis <- function(composition_data, site_no = 1, site_name = "Pinarbasi Measured Assemblage", full_element_name_key = pinarbasi_element_name_key) {
  ggplot(composition_data[Site_No %in% site_no, .(N = sum(N)), .(Iteration, Simulated_Group, Element, Element_Portion)][, .(Element, Element_Portion, group = Simulated_Group, Plot_Group = paste(Element, as.numeric(Simulated_Group), sep = "."), N)]) + aes(y = N, x = Plot_Group) +
    stat_slab(normalize = "groups", slab_type = "histogram", breaks = 0:(composition_data[Site_No %in% site_no, .(N = sum(N)), .(Iteration, Simulated_Group, Element, Element_Portion)][, max(N)]), aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(0.80, 0.95, 1), labels = scales::percent_format())))) +
    stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
    scale_fill_ramp_discrete(name = "Interval", range = c(0.5, 0.15), na.translate = F) +
    scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
    scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
    scale_x_discrete(name = "Element", breaks = composition_data[, .N, .(Element, Element_Portion)][order(Element_Portion), paste(Element, ".2", sep = "")], labels = composition_data[, .N, .(Element, Element_Portion)][full_element_name_key, on = "Element"][!is.na(Element_Portion)][order(Element_Portion), Full_Element_Name]) +
    scale_y_continuous(name = "Estimated Count") + coord_cartesian(expand = FALSE) +
    labs(title = site_name) +
    theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 90, size = 10, hjust = 0.5))
}

theta_finder <- function(Specimen_No, Element_Portion, Immature, Immature_Proportions, element_thetas, specimen_probs) {
  thetas <- rep(NA, 3)
  immature_proportion <- Immature_Proportions[Portion %in% Element_Portion, Immature_Proportion]
  thetas[1:3] <- ifelse(rep(!is.na(Specimen_No), 3),
                        specimen_probs[Specimen_No, 1:3],
                        ifelse(rep(Immature == 1, 3),
                               c(element_thetas[1, Element_Portion] / immature_proportion,
                                 element_thetas[2, Element_Portion] * immature_proportion,
                                 element_thetas[3, Element_Portion] * immature_proportion),
                               c(0,
                                 element_thetas[2, Element_Portion] / (1 - min(c(element_thetas[1, Element_Portion], 0.99999))), #fail-safe for extreme values
                                 element_thetas[3, Element_Portion] / (1 - min(c(element_thetas[1, Element_Portion], 0.99999)))))
  )
  list(p_immature = thetas[1] / sum(thetas), p_female = thetas[2] / sum(thetas), p_male = thetas[3] / sum(thetas))
}

#Measurement assemblage#
#set up the datasets necessary to run the simulations for the three assemblages
pinarbasi_measured_immature_proportions <- pinarbasi_measured_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]
pinarbasi_modeled_immature_proportions <- pinarbasi_modeled_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]
pinarbasi_full_immature_proportions <- pinarbasi_full_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]

clusterExport(cl, list('data.table', 'melt', 'ifm_sample', 'theta_finder', 'ifm_composition', 'pinarbasi_measured_assemblage', 'pinarbasi_measured_immature_proportions', 'pinarbasi_modeled_assemblage', 'pinarbasi_modeled_immature_proportions', 'pinarbasi_full_assemblage', 'pinarbasi_full_immature_proportions', 'pinarbasi_post', 'pinarbasi_unmodeled_element_portion_theta'))

pinarbasi_measured_assemblage_simulated_composition <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_composition(pinarbasi_measured_assemblage[, theta_finder(Specimen_No, Element_Portion, Immature, pinarbasi_measured_immature_proportions, element_thetas = pinarbasi_post$theta[x, , ], specimen_probs = pinarbasi_post$specimen_prob[x, , ]), .(ID, Specimen_No, Element, Element_Portion, Immature)][, .(ID, Specimen_No, Site_No = 1, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)]))
pinarbasi_modeled_assemblage_simulated_composition <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_composition(pinarbasi_modeled_assemblage[, theta_finder(Specimen_No, Element_Portion, Immature, pinarbasi_modeled_immature_proportions, element_thetas = pinarbasi_post$theta[x, , ], specimen_probs = pinarbasi_post$specimen_prob[x, , ]), .(ID, Specimen_No, Element, Element_Portion, Immature)][, .(ID, Specimen_No, Site_No = 1, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)]))
pinarbasi_full_assemblage_simulated_composition <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_composition(pinarbasi_full_assemblage[, theta_finder(Specimen_No, Element_Portion, Immature, pinarbasi_full_immature_proportions, element_thetas = cbind(pinarbasi_post$theta[x, , ], t(pinarbasi_unmodeled_element_portion_theta[Iteration %in% x, .(theta_1, theta_2, theta_3)])), specimen_probs = pinarbasi_post$specimen_prob[x, , ]), .(ID, Specimen_No, Element, Element_Portion, Immature)][, .(ID, Specimen_No, Site_No = 1, Element, Element_Portion, Immature, p_immature, p_female, p_male)])[, .(Iteration = x, Site_No, Element_Portion, Element, Simulated_Group, N)]))
#
pinarbasi_measured_composition <- composition_analysis(pinarbasi_measured_assemblage_simulated_composition, site_name = "Measured Assemblage")
pinarbasi_modeled_composition <- composition_analysis(pinarbasi_modeled_assemblage_simulated_composition, site_name = "Modeled Assemblage")
pinarbasi_full_composition <- composition_analysis(pinarbasi_full_assemblage_simulated_composition, site_name = "Full Assemblage")
#
pinarbasi_composition_plots <- ggarrange(pinarbasi_measured_composition, pinarbasi_modeled_composition, pinarbasi_full_composition, nrow = 3, ncol = 1, common.legend = T, legend = "bottom")
pinarbasi_composition_figure <- annotate_figure(pinarbasi_composition_plots, top = text_grob("Estimated Composition of Pinarbasi B Sheep", face = "bold", size = 14))
pinarbasi_composition_figure

####Running the multi-assemblage model: NW Anatolian Neolithic Sites####
#Combine the site-level data together, add Site_No field
nw_anatolian_mixmod_data <- rbind(
  data.table(Site_No = 1, barcin_mixmod_data),
  data.table(Site_No = 2, ilipinar_mixmod_data[Site %in% "Ilipinar 1 (Late Neolithic/Transitional)"]),
  data.table(Site_No = 3, mentese_mixmod_data),
  data.table(Site_No = 4, ilipinar_mixmod_data[Site %in% "Ilipinar 2 (Early Chalcolithic)"])
)
#Re-assign numeric codes for element portions, measurement sets, and individual specimens (to prevent mismatches/overlap)
nw_anatolian_mixmod_data[, Measurement_Set := as.numeric(as.factor(Measurement))]
nw_anatolian_mixmod_data[, Element_Portion := as.numeric(as.factor(Element))]
nw_anatolian_mixmod_data[, Specimen_No := as.numeric(as.factor(ID))]

#Combine the demographic data together, add Site_No field
nw_anatolian_demographic_observations <- rbind(
  data.table(Site_No = 1, barcin_demographic_observations),
  data.table(Site_No = 2, ilipinar_demographic_observations[Site %in% "Ilipinar 1 (Late Neolithic/Transitional)"]),
  data.table(Site_No = 3, mentese_demographic_observations),
  data.table(Site_No = 4, ilipinar_demographic_observations[Site %in% "Ilipinar 2 (Early Chalcolithic)"])
)

nw_anatolian_mixmod_standata <- list(
  #Sample sizes
  N_Sites = nw_anatolian_mixmod_data[, .N, Site_No][, .N],
  N_Specimens = nw_anatolian_mixmod_data[, .N, Specimen_No][, .N],
  N_Measurements = nw_anatolian_mixmod_data[, .N],
  N_Element_Portions = nw_anatolian_mixmod_data[, .N, Element_Portion][, .N],
  N_Measurement_Sets = nw_anatolian_mixmod_data[, .N, Measurement_Set][, .N],
  #Specimen observations
  Site = nw_anatolian_mixmod_data[, .N, .(Specimen_No, Site_No, Element_Portion, Immature)][order(Specimen_No), Site_No],
  Element_Portion = nw_anatolian_mixmod_data[, .N, .(Specimen_No, Site_No, Element_Portion, Immature)][order(Specimen_No), Element_Portion],
  Immature = nw_anatolian_mixmod_data[, .N, .(Specimen_No, Site_No, Element_Portion, Immature)][order(Specimen_No), Immature],
  Immature_Proportion = as.matrix(dcast(nw_anatolian_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(nw_anatolian_mixmod_data[, .N, Element_Portion][, .N] + 1)],
  #Measurement observations
  Measurement_obs = nw_anatolian_mixmod_data[, Measurement_value],
  Measurement_sd = nw_anatolian_mixmod_data[, Measurement_value * 0.01],
  Reference_obs = nw_anatolian_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value],
  Reference_sd = nw_anatolian_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value * 0.01],
  Measurement_Set = nw_anatolian_mixmod_data[, Measurement_Set],
  Specimen = nw_anatolian_mixmod_data[, Specimen_No],
  #Demographic observations
  N_Immature_obs = nw_anatolian_demographic_observations[, .N],
  Immature_obs_site = nw_anatolian_demographic_observations[, Site_No],
  Immature_obs = nw_anatolian_demographic_observations[, N_Unfused],
  Immature_obs_n = nw_anatolian_demographic_observations[, N_Ageable],
  N_Female_obs = nw_anatolian_demographic_observations[, .N],
  Female_obs_site = nw_anatolian_demographic_observations[, Site_No],
  Female_obs = nw_anatolian_demographic_observations[, N_Female],
  Female_obs_n = nw_anatolian_demographic_observations[, N_Sexable],
  #Prior distributions for hyper-parameters
  prior_theta_raw_1 = c(-0.5, 2.5),
  prior_theta_raw_2 = c(0, 2.5),
  prior_mu_female = c(-0.1, 0.1),
  prior_logdelta_immature = c(-3.5, 0.5),
  prior_logdelta_male = c(-2, 0.5),
  prior_logsigma_immature = c(-3.05, 0.25),
  prior_logsigma_female = c(-3.1, 0.2),
  prior_logsigma_male = c(-3.1, 0.2)
)

multisite_mixture_stanmodel <- cmdstan_model("./Scripts/LSI_mixture_model_multisite.stan")
nw_anatolian_multisite_samples <- multisite_mixture_stanmodel$sample(
  data = nw_anatolian_mixmod_standata,
  chains = 4,
  parallel_chains = 4,
  refresh = 250,
  adapt_delta = 0.99,
  max_treedepth = 15
)
beepr::beep()
nw_anatolian_multisite_samples$summary(c("site_theta"))
nw_anatolian_multisite_samples$summary(c("site_mu_female"))
nw_anatolian_multisite_samples$summary(c("site_theta_female"))
nw_anatolian_multisite_samples$summary(c("mu_female"))
nw_anatolian_multisite_samples$summary(c("element_sigma"))
nw_anatolian_multisite_samples$summary(c("site_sigma"))
nw_anatolian_multisite_samples$summary(c("interaction_sigma"))


nw_anatolian_multisite_stanfit <- rstan::read_stan_csv(nw_anatolian_multisite_samples$output_files())
plot(nw_anatolian_multisite_stanfit, pars = c("site_theta"))
plot(nw_anatolian_multisite_stanfit, pars = c("site_mu_immature", "site_mu_female", "site_mu_male"))
plot(nw_anatolian_multisite_stanfit, pars = c("site_p_immature", "site_theta_female"))
traceplot(nw_anatolian_multisite_stanfit, pars = c("site_mu_female"))

nw_anatolian_post <- extract(nw_anatolian_multisite_stanfit)
#

####Comparison: evaluation of demographic structure and body size####
#body size: compare the distributions for female, then put in contrasts
nw_anatolian_site_mu_df <- data.table(Iteration = rep(rep(1:4000, 3), 4),
                                      Group = rep(factor(c("Immature", "Female", "Male"), levels = c("Immature", "Female", "Male")), each = 4000 * 4),
                                      Site = rep(rep(nw_anatolian_mixmod_data[, .N, .(Site, Site_No)][order(Site_No), Site], each = 4000), 3),
                                      Site_No = rep(rep(nw_anatolian_mixmod_data[, .N, .(Site, Site_No)][order(Site_No), Site_No], each = 4000), 3),
                                      mu = c(cbind(nw_anatolian_post$site_mu_immature, nw_anatolian_post$site_mu_female, nw_anatolian_post$site_mu_male)))
#
size_plot <- ggplot(nw_anatolian_site_mu_df[Group %in% "Female", .(Iteration, Group, Site, Site_No, mu, Plot_Group = paste(Site_No, as.numeric(Group), sep = "."))]) + aes(y = mu, x = Plot_Group) +
  stat_slab(normalize = "groups", aes(fill = as.factor(Site_No), fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = as.factor(Site_No)), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)")) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), na.translate = F, labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)")) +
  scale_y_continuous(name = "Female Average LSI Value") +
  scale_x_discrete(name = "Site", breaks = nw_anatolian_site_mu_df[, .N, .(Site, Site_No)][order(Site_No), paste(Site_No, ".2", sep = "")], labels = c("Barcin", "Ilipinar\n(Neolithic)", "Mentese", "Ilipinar\n(Chalcolithic)")) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 0, size = 10, hjust = 0.5))
#making contrasts for female body size
nw_anatolian_mu_contrasts <- nw_anatolian_site_mu_df[, .(Site = ifelse(Site_No %in% 1, "Barcin", ifelse(Site_No %in% 2, "Ilipinar_Neolithic", ifelse(Site_No %in% 3, "Mentese", "Ilipinar_Chalcolithic"))), Site_No, Barcin = mu - mu[Site_No %in% 1], Ilipinar_Neolithic = mu - mu[Site_No %in% 2], Mentese = mu - mu[Site_No %in% 3], Ilipinar_Chalcolithic = mu - mu[Site_No %in% 4]), .(Iteration, Group)]
nw_anatolian_mu_contrasts <- melt(nw_anatolian_mu_contrasts, id.vars = c("Iteration", "Group", "Site_No", "Site"), measure.vars = c("Barcin", "Ilipinar_Neolithic", "Mentese", "Ilipinar_Chalcolithic"), variable.name = "Comparand", value.name = "Contrast")[Site != Comparand]
nw_anatolian_mu_contrasts[, "Comparison" := .(paste(Comparand, Site, sep = "."))]
#
barcin_plot <- ggplot(nw_anatolian_mu_contrasts[Site_No %in% 1 & Group %in% "Female"]) + aes(x = Contrast, y = Comparand) +
  geom_vline(xintercept = 0) +
  stat_slab(normalize = "groups", aes(fill = Comparand, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Comparand), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), na.translate = F, labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_x_continuous(name = "", limits = c(-0.15, 0.15)) +
  scale_y_discrete(name = element_blank()) +
  #  scale_y_discrete(name = "Comparison Site", breaks = c("Barcin.Ilipinar_Neolithic", "Ilipinar_Chalcolithic.Ilipinar_Neolithic", "Ilipinar_Neolithic.Ilipinar_Chalcolithic", "Mentese.Ilipinar_Chalcolithic"), labels = c("Barcin", "Ilipinar\n(Chalcolithic)", "Ilipinar\n(Neolithic)", "Mentese")) +
  theme_classic() + theme(legend.text = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_text(size = 10), axis.title = element_blank(), axis.text.y = element_blank())
ilipinar1_plot <- ggplot(nw_anatolian_mu_contrasts[Site_No %in% 2 & Group %in% "Female"]) + aes(x = Contrast, y = Comparand) +
  geom_vline(xintercept = 0) +
  stat_slab(normalize = "groups", aes(fill = Comparand, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Comparand), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), na.translate = F, labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_x_continuous(name = "", limits = c(-0.15, 0.15)) +
  scale_y_discrete(name = element_blank()) +
  #  scale_y_discrete(name = "Comparison Site", breaks = c("Barcin.Ilipinar_Neolithic", "Ilipinar_Chalcolithic.Ilipinar_Neolithic", "Ilipinar_Neolithic.Ilipinar_Chalcolithic", "Mentese.Ilipinar_Chalcolithic"), labels = c("Barcin", "Ilipinar\n(Chalcolithic)", "Ilipinar\n(Neolithic)", "Mentese")) +
  theme_classic() + theme(legend.text = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_text(size = 10), axis.title = element_blank(), axis.text.y = element_blank())
mentese_plot <- ggplot(nw_anatolian_mu_contrasts[Site_No %in% 3 & Group %in% "Female"]) + aes(x = Contrast, y = Comparand) +
  geom_vline(xintercept = 0) +
  stat_slab(normalize = "groups", aes(fill = Comparand, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Comparand), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), na.translate = F, labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_x_continuous(name = "", limits = c(-0.15, 0.15)) +
  scale_y_discrete(name = element_blank()) +
  #  scale_y_discrete(name = "Comparison Site", breaks = c("Barcin.Ilipinar_Neolithic", "Ilipinar_Chalcolithic.Ilipinar_Neolithic", "Ilipinar_Neolithic.Ilipinar_Chalcolithic", "Mentese.Ilipinar_Chalcolithic"), labels = c("Barcin", "Ilipinar\n(Chalcolithic)", "Ilipinar\n(Neolithic)", "Mentese")) +
  theme_classic() + theme(legend.text = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_text(size = 10), axis.title = element_blank(), axis.text.y = element_blank())
ilipinar2_plot <- ggplot(nw_anatolian_mu_contrasts[Site_No %in% 4 & Group %in% "Female"]) + aes(x = Contrast, y = Comparand) +
  geom_vline(xintercept = 0) +
  stat_slab(normalize = "groups", aes(fill = Comparand, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Comparand), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), na.translate = F, labels = c("Barcin" = "Barcin", "Ilipinar_Neolithic" = "Ilipinar (Neolithic)", "Mentese" = "Mentese", "Ilipinar_Chalcolithic" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_x_continuous(name = "", limits = c(-0.15, 0.15)) +
  scale_y_discrete(name = element_blank()) +
  #  scale_y_discrete(name = "Comparison Site", breaks = c("Barcin.Ilipinar_Neolithic", "Ilipinar_Chalcolithic.Ilipinar_Neolithic", "Ilipinar_Neolithic.Ilipinar_Chalcolithic", "Mentese.Ilipinar_Chalcolithic"), labels = c("Barcin", "Ilipinar\n(Chalcolithic)", "Ilipinar\n(Neolithic)", "Mentese")) +
  theme_classic() + theme(legend.text = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_text(size = 10), axis.title = element_blank(), axis.text.y = element_blank())

contrast_plot <- ggarrange(barcin_plot, ilipinar1_plot, mentese_plot, ilipinar2_plot, nrow = 4, ncol = 1, common.legend = T, align = c("hv"), legend = "none", labels = c("Barcin", "Ilipinar\n(Neolithic)", "Mentese", "Ilipinar\n(Chalcolithic)"), font.label = list(size = 10, face = "plain"), label.x = 0.01)
contrast_plot <- annotate_figure(contrast_plot, bottom = "Size Contrast (LSI)")
ggarrange(size_plot, contrast_plot, common.legend = T, legend = "bottom")

#site-level: overall composition
nw_anatolian_site_pi_df <- data.table(Iteration = rep(rep(1:4000, 3), 4), 
                                      Group = rep(rep(factor(c("Immature", "Female", "Male"), levels = c("Immature", "Female", "Male")), each = 4000), 4),
                                      Site = rep(nw_anatolian_mixmod_data[, .N, .(Site, Site_No)][order(Site_No), Site], each = 4000 * 3),
                                      Site_No = rep(nw_anatolian_mixmod_data[, .N, .(Site, Site_No)][order(Site_No), Site_No], each = 4000 * 3),
                                      theta = c(nw_anatolian_post$site_theta))

ggplot(nw_anatolian_site_pi_df[, .(Iteration, Group, Site, Site_No, theta, Plot_Group = paste(Site, as.numeric(Group), sep = "."))]) + aes(y = theta, x = Plot_Group) +
  stat_slab(normalize = "groups", aes(fill = Group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Group), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Site", breaks = nw_anatolian_site_pi_df[, .N, .(Site, Site_No)][order(Site_No), paste(Site, ".2", sep = "")], labels = nw_anatolian_site_pi_df[, .N, .(Site, Site_No)][order(Site_No), Site]) +
  scale_y_continuous(name = "Proportion", labels = scales::percent, limits = c(0, 1.02)) + coord_cartesian(expand = FALSE) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 0, size = 10, hjust = 0.5))
#
nw_anatolian_site_demographic_parameters <- data.table(Iteration = rep(rep(1:4000, 2), 4),
                                                       Parameter = rep(factor(c("p_Immature", "Adult_Sex_Ratio"), levels = c("p_Immature", "Adult_Sex_Ratio")), each = 4000 * 4),
                                                       Site = rep(rep(nw_anatolian_mixmod_data[, .N, .(Site, Site_No)][order(Site_No), Site], each = 4000), 2),
                                                       Site_No = rep(rep(nw_anatolian_mixmod_data[, .N, .(Site, Site_No)][order(Site_No), Site_No], each = 4000), 2),
                                                       theta = c(cbind(nw_anatolian_post$site_p_immature, nw_anatolian_post$site_theta_female)))
#
ggplot(nw_anatolian_site_demographic_parameters[, .(Iteration, Parameter, Site, Site_No, theta, Plot_Group = paste(Site_No, as.numeric(Parameter), sep = "."))]) + aes(y = theta, x = Plot_Group) +
  stat_slab(normalize = "groups", aes(fill = Parameter, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = Parameter), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Parameter", values = c("black", "blue"), na.translate = F) +
  scale_fill_manual(name = "Parameter", values = c("black", "blue"), na.translate = F) +
  scale_x_discrete(name = "Site", breaks = nw_anatolian_site_pi_df[, .N, .(Site, Site_No)][order(Site_No), paste(Site_No, ".2", sep = "")], labels = nw_anatolian_site_pi_df[, .N, .(Site, Site_No)][order(Site_No), Site]) +
  scale_y_continuous(name = "Proportion", labels = scales::percent, limits = c(0, 1.02)) + coord_cartesian(expand = FALSE) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 0, size = 10, hjust = 0.5))

####Comparison of the demographic variables####
#middle panel: bivariate plot
nw_anatolian_posterior_data <- data.table(Iteration = rep(1:4000, 4), Site_No = rep(1:4, each = 4000), Site = rep(nw_anatolian_mixmod_data[, .N, .(Site_No, Site)][order(Site_No), Site], each = 4000), p_immature = c(nw_anatolian_post$site_p_immature), sex_ratio = c(nw_anatolian_post$site_theta_female), mu_female = c(nw_anatolian_post$site_mu_female))
nw_anatolian_posterior_data[, euclidean_dist_demographic := .(sqrt((p_immature - mean(p_immature))^2 + (sex_ratio - mean(sex_ratio))^2)), Site_No]
#
hull_data <- rbind(
  rbindlist(lapply(1:4, function(x) data.table(Site_No = x, CI = 1.00, nw_anatolian_posterior_data[Site_No %in% x][chull(nw_anatolian_posterior_data[Site_No %in% x, .(p_immature, sex_ratio)]), .(p_immature, sex_ratio)]))),
  rbindlist(lapply(1:4, function(x) data.table(Site_No = x, CI = 0.95, nw_anatolian_posterior_data[Site_No %in% x & euclidean_dist_demographic <= quantile(euclidean_dist_demographic, 0.95)][chull(nw_anatolian_posterior_data[Site_No %in% x & euclidean_dist_demographic <= quantile(euclidean_dist_demographic, 0.95), .(p_immature, sex_ratio)]), .(p_immature, sex_ratio)]))),
  rbindlist(lapply(1:4, function(x) data.table(Site_No = x, CI = 0.80, nw_anatolian_posterior_data[Site_No %in% x & euclidean_dist_demographic <= quantile(euclidean_dist_demographic, 0.80)][chull(nw_anatolian_posterior_data[Site_No %in% x & euclidean_dist_demographic <= quantile(euclidean_dist_demographic, 0.80), .(p_immature, sex_ratio)]), .(p_immature, sex_ratio)])))
)
#
central_plot <- ggplot(nw_anatolian_posterior_data) + aes(x = p_immature, y = sex_ratio) +
  geom_point(data = nw_anatolian_posterior_data[, .(p_immature = mean(p_immature), sex_ratio = mean(sex_ratio), mu_female = mean(mu_female)), Site_No], aes(col = as.factor(Site_No))) +
  geom_polygon(data = hull_data[CI %in% 1.00], aes(fill = as.factor(Site_No), color = as.factor(Site_No)), alpha = 0.3) +
  geom_polygon(data = hull_data[CI %in% 0.95], aes(fill = as.factor(Site_No), color = as.factor(Site_No)), alpha = 0.50) +
  geom_polygon(data = hull_data[CI %in% 0.80], aes(fill = as.factor(Site_No), color = as.factor(Site_No)), alpha = 0.80) +
  scale_y_continuous(name = "Adult Sex Ratio (%Female)", labels = scales::percent, limits = c(0.00, 1.00)) +
  scale_x_continuous(name = "Proportion Immature (%Immature)", labels = scales::percent, limits = c(0.00, 1.00)) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  coord_cartesian(expand = FALSE) +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.ticks.x = element_blank(), axis.text.x = element_text(angle = 270, size = 10, hjust = 0.05, vjust = 1), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 45, size = 10, hjust = 0.5))
#
upper_plot <- ggplot(nw_anatolian_posterior_data) + aes(x = p_immature, y = as.factor(Site_No)) +
  stat_slab(normalize = "groups", aes(fill = as.factor(Site_No), fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = as.factor(Site_No)), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_x_continuous(name = "", labels = scales::percent, limits = c(0.00, 1.00)) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  coord_cartesian(expand = FALSE) +
  theme_classic() + theme(axis.line.y = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), axis.title = element_blank(), axis.text.y = element_blank())
#
side_plot <- ggplot(nw_anatolian_posterior_data) + aes(x = as.factor(Site_No), y = sex_ratio) +
  stat_slab(normalize = "groups", aes(fill = as.factor(Site_No), fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = as.factor(Site_No)), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_y_continuous(name = "", labels = scales::percent, limits = c(0.00, 1.00)) +
  scale_color_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  scale_fill_manual(name = "Site", values = c("#e66101", "#b2abd2", "#fdb863", "#5e3c99"), labels = c("1" = "Barcin", "2" = "Ilipinar (Neolithic)", "3" = "Mentese", "4" = "Ilipinar (Chalcolithic)"), drop = FALSE) +
  coord_cartesian(expand = FALSE) +
  theme_classic() + theme(axis.line.x = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), axis.title = element_blank(), axis.text.y = element_blank())
#
ggarrange(upper_plot, NULL, central_plot, side_plot, ncol = 2, nrow = 2, heights = c(1, 2), widths = c(2, 1), align = "hv", common.legend = T, legend = "bottom")

####Look at sex-specific fusion rates####
#Calculating three new sets of (site and) element_portion-specific mixing probabilities for unmodeled element portions
nw_anatolian_unmodeled_element_portion_theta <- data.table(Iteration = rep(rep(1:4000, 2), 4),
                                                           Site_Num = rep(1:4, each = 4000 * 2),
                                                           Element_Portion = rep(rep(17:18, each = 4000), 4),
                                                           Element = rep(rep(c("Pel", "Uln"), each = 4000), 4))
#specify hyper-parameter values for the model
for(j in 1:4) {
  for(i in 1:2) {
    element_theta_raw <- t(sapply(1:4000, function(x) nw_anatolian_post$grand_theta_raw[x, 1:2] + nw_anatolian_post$v_site[x, j, 1:2] + MASS::mvrnorm(1, mu = rep(0, 2), Sigma = diag(nw_anatolian_post$element_sigma[x, 1:2]) %*% nw_anatolian_post$Rho_element[x, 1:2, 1:2] %*% diag(nw_anatolian_post$element_sigma[x, 1:2])) + MASS::mvrnorm(1, mu = rep(0, 2), Sigma = diag(nw_anatolian_post$interaction_sigma[x, 1:2]) %*% nw_anatolian_post$Rho_interaction[x, 1:2, 1:2] %*% diag(nw_anatolian_post$interaction_sigma[x, 1:2]))))
    nw_anatolian_unmodeled_element_portion_theta[Site_Num %in% j & Element_Portion %in% (17:18)[i], c("theta_raw_1", "theta_raw_2") := .(element_theta_raw[, 1], element_theta_raw[, 2])]
  }
}
#perform stick-breaking procedure to turn theta_raw into theta values
nw_anatolian_unmodeled_element_portion_theta[, theta_1 := boot::inv.logit(theta_raw_1 + log(0.5))]
nw_anatolian_unmodeled_element_portion_theta[, theta_2 := (1 - theta_1) * boot::inv.logit(theta_raw_2 + log(1))]
nw_anatolian_unmodeled_element_portion_theta[, theta_3 := (1 - (theta_1 + theta_2))]

#create full assemblage for analysis
full_assemblage_maker <- function(original_data, biology_code, site_code, mixmod_data, element_list, full_elements, element_key) {
  full_assemblage <- original_data[`Has Biological Taxonomy [Label]` %in% biology_code & `Has anatomical identification [Label]` %in% full_elements, .(ID = paste(site_code, Label, sep = " "), Site = site_code, Anatomy = `Has anatomical identification [Label]`, `Proximal Fusion` = `Has fusion character [Proximal Label]`, `Distal Fusion` = `Has fusion character [Distal Label]`)]
  #Assign specimen numbers for the specimens that were modeled directly (measured specimens) in the modeled and full assemblages
  full_assemblage <- mixmod_data[, .N, .(ID, Specimen_No, Immature)][full_assemblage, on = "ID"]
  #Assign the element portion labels for specimens that weren't modeled directly (no measurements)
  for(i in 1:element_key[, .N]) {
    full_assemblage[Anatomy %in% element_key[i, `Anatomy Label`], Element := element_key[i, `Element Label`]]
    #Separate out proximal and distal element portions based on presence of later-fusing measurements (e.g., radius bone is proximal/distal based on presence of Bd measurement)
    if(element_key[i, `Element Label`] %in% c("Rad", "Mtc", "Fem", "Mtt")) {
      full_assemblage[Anatomy %in% element_key[i, `Anatomy Label`], Element := ifelse(`Distal Fusion` %in% "" == F, paste(element_key[i, `Element Label`], "dist", sep = "_"), paste(element_key[i, `Element Label`], "prox", sep = "_"))]
    }
    if(element_key[i, `Element Label`] %in% c("Tib")) {
      full_assemblage[Anatomy %in% element_key[i, `Anatomy Label`], Element := ifelse(`Proximal Fusion` %in% "" == F, paste(element_key[i, `Element Label`], "prox", sep = "_"), paste(element_key[i, `Element Label`], "dist", sep = "_"))]
    }
  }
  #Assign Element_Portion values that match the original sets (and add new ones for unmodeled element portions)
  full_assemblage <- element_list[, .N, .(Element, Element_Portion)][full_assemblage, on = "Element"]
  full_assemblage[Element %in% "Pel", Element_Portion := 17]
  full_assemblage[Element %in% "Uln", Element_Portion := 18]
  #Get the Immature variable (potentially immature status based on fusion)
  full_assemblage[is.na(Immature) & Element %in% c("Sca", "Ast"), Immature := 1] #does not fuse / subject to post-fusion growth and has no relevant fusion data to exclude immature status
  full_assemblage[is.na(Immature) & Element %in% c("Hum", "Cal", "PH1", "PH2"), Immature := as.numeric(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") == F)]
  full_assemblage[is.na(Immature) & Element %in% c("Rad_prox", "Rad_dist", "Mtc_prox", "Mtc_dist", "Mtt_prox", "Mtt_dist"), Immature := as.numeric(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing") == F)]
  full_assemblage[is.na(Immature) & Element %in% c("Uln", "Pel", "Fem_prox", "Fem_dist", "Tib_prox", "Tib_dist"), Immature := as.numeric((`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") | `Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing")) == F)]
  #
  full_assemblage[, .(ID, Specimen_No, Site, Anatomy, Element, Element_Portion, Immature, `Proximal Fusion`, `Distal Fusion`)]
}
nw_anatolian_additional_elements <- c("innominate bone", "ulna") #additional elements for fusion analysis

barcin_full_assemblage <- full_assemblage_maker(original_data = barcin, biology_code = c("Bos taurus Linnaeus, 1758", "Bos primigenius"), site_code = "Barcin", mixmod_data = nw_anatolian_mixmod_data[Site %in% "Barcin"], element_list = nw_anatolian_mixmod_data[, .N, .(Element, Element_Portion)], full_elements = c(modeled_elements, "middle phalanx", nw_anatolian_additional_elements, "fused metacarpal bones 3 and 4; metacarpal bone of digit 3; metacarpal bone of digit 4; metacarpal bone of digit 5", "metatarsal bone of digit 5; metatarsal bone of digit 2; fused metatarsal bones 3 and 4"), element_key = rbind(barcin_element_key, data.table(`Anatomy Label` = c("innominate bone", "ulna"), `Element Label` = c("Pel", "Uln"))))
ilipinar1_full_assemblage <- full_assemblage_maker(original_data = ilipinar[Period %in% c("X", "IX", "IX/VIII", "VIII", "VII")], biology_code = c("Bos taurus Linnaeus, 1758", "Bos", "Bos primigenius"), site_code = "Ilipinar", mixmod_data = nw_anatolian_mixmod_data[Site %in% "Ilipinar 1 (Late Neolithic/Transitional)"], element_list = nw_anatolian_mixmod_data[, .N, .(Element, Element_Portion)], full_elements = c(modeled_elements, "middle phalanx", nw_anatolian_additional_elements), element_key = rbind(ilipinar_element_key, data.table(`Anatomy Label` = c("innominate bone", "ulna"), `Element Label` = c("Pel", "Uln"))))
ilipinar1_full_assemblage[, Site := "Ilipinar 1 (Late Neolithic/Transitional)"]
ilipinar2_full_assemblage <- full_assemblage_maker(original_data = ilipinar[Period %in% c("VI", "VI/VA", "VA", "VB")], biology_code = c("Bos taurus Linnaeus, 1758", "Bos", "Bos primigenius"), site_code = "Ilipinar", mixmod_data = nw_anatolian_mixmod_data[Site %in% "Ilipinar 2 (Early Chalcolithic)"], element_list = nw_anatolian_mixmod_data[, .N, .(Element, Element_Portion)], full_elements = c(modeled_elements, "middle phalanx", nw_anatolian_additional_elements), element_key = rbind(ilipinar_element_key, data.table(`Anatomy Label` = c("innominate bone", "ulna"), `Element Label` = c("Pel", "Uln"))))
ilipinar2_full_assemblage[, Site := "Ilipinar 2 (Early Chalcolithic)"]
mentese_full_assemblage <- full_assemblage_maker(original_data = mentese, biology_code = "Bos", site_code = "Mentese", mixmod_data = nw_anatolian_mixmod_data[Site %in% "Mentese"], element_list = nw_anatolian_mixmod_data[, .N, .(Element, Element_Portion)], full_elements = c(modeled_elements, "middle phalanx", nw_anatolian_additional_elements), element_key = rbind(mentese_element_key, data.table(`Anatomy Label` = c("innominate bone", "ulna"), `Element Label` = c("Pel", "Uln"))))
mentese_full_assemblage[Anatomy %in% "calcaneus", `Proximal Fusion` := ifelse(`Distal Fusion` %in% "Distal epiphysis unfused", "Proximal epiphysis unfused", ifelse(`Distal Fusion` %in% "Distal epiphysis fusing", "Proximal epiphysis fusing", ifelse(`Distal Fusion` %in% "Distal epiphysis fused", "Proximal epiphysis fused", ifelse(`Distal Fusion` %in% "", "", NA))))] #calcaneus fusion is listed as `Distal Fusion` but is `Proximal Fusion` in other sites/codes
#
#Step 2: estimate male and female fusion rates for earlier-fusing and later-fusing elements
bos_element_stage_key <- data.table(Fusion_Element = c("Rad_prox", "Hum_dist", "Pel", "Sca", "PH1", "PH2", "Tib_dist", "Mtc_dist", "Mtt_dist", "Cal", "Fem_prox", "Fem_dist", "Uln", "Rad_dist", "Tib_prox", "Hum_prox"),
                                Stage = c(1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4))
#
fusion_assemblage_maker <- function(full_assemblage, element_stage_key) {
  full_assemblage[Element %in% "Rad_prox" & `Proximal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Rad_prox", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Hum" & `Distal Fusion` %in% "" == F & `Proximal Fusion` %in% "", c("Fusion_Element", "Fusion") := .("Hum_dist", ifelse(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Pel" & (`Proximal Fusion` %in% "" == F | `Distal Fusion` %in% "" == F), c("Fusion_Element", "Fusion") := .("Pel", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") | `Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Sca" & `Distal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Sca", ifelse(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "PH1" & `Proximal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("PH1", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "PH2" & `Proximal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("PH2", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Tib_dist" & `Distal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Tib_dist", ifelse(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Mtc_dist" & `Distal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Mtc_dist", ifelse(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Mtt_dist" & `Distal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Mtt_dist", ifelse(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Cal" & `Proximal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Cal", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Fem_prox" & `Proximal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Fem_prox", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Fem_dist" & `Distal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Fem_dist", ifelse(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Uln" & (`Proximal Fusion` %in% "" == F | `Distal Fusion` %in% "" == F), c("Fusion_Element", "Fusion") := .("Uln", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing") | `Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Rad_dist" & `Distal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Rad_dist", ifelse(`Distal Fusion` %in% c("Distal epiphysis fused", "Distal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Tib_prox" & `Proximal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Tib_prox", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing"), "Fused", "Unfused"))]
  full_assemblage[Element %in% "Hum" & `Proximal Fusion` %in% "" == F, c("Fusion_Element", "Fusion") := .("Hum_prox", ifelse(`Proximal Fusion` %in% c("Proximal epiphysis fused", "Proximal epiphysis fusing"), "Fused", "Unfused"))]
  fusion_assemblage <- full_assemblage[, .(ID, Specimen_No, Site, Anatomy, Element, Element_Portion, Immature, `Proximal Fusion`, `Distal Fusion`, Fusion_Element, Fusion)][element_stage_key, on = "Fusion_Element"][!is.na(Fusion_Element) & !is.na(Fusion)]
  fusion_assemblage
}
####Running 
#Simulates the fusion rates for an assemblage with Immature/Female/male probabilities
ifm_fusion_rate <- function(measured_specimens) {
  #simulate sex assignments
  measured_specimens[, Simulated_Group := sapply(1:.N, function(x) ifm_sample(p_immature[x], p_female[x], p_male[x]))]
  #counts of the different elements by group and fusion status
  
  melt(measured_specimens[, .(`Immature` = sum(Simulated_Group %in% "Immature"),
                              `Female` = sum(Simulated_Group %in% "Female"),
                              `Male` = sum(Simulated_Group %in% "Male")), .(Site_No, Fusion_Element, Stage, Fusion)], id.vars = c("Site_No", "Fusion_Element", "Stage", "Fusion"), variable.name = "Simulated_Group", value.name = "N")[order(Site_No, Stage, Fusion_Element, Fusion, Simulated_Group)]
}
barcin_fusion_assemblage <- fusion_assemblage_maker(full_assemblage = barcin_full_assemblage, element_stage_key = bos_element_stage_key)
ilipinar1_fusion_assemblage <- fusion_assemblage_maker(full_assemblage = ilipinar1_full_assemblage, element_stage_key = bos_element_stage_key)
mentese_fusion_assemblage <- fusion_assemblage_maker(full_assemblage = mentese_full_assemblage, element_stage_key = bos_element_stage_key)
ilipinar2_fusion_assemblage <- fusion_assemblage_maker(full_assemblage = ilipinar2_full_assemblage, element_stage_key = bos_element_stage_key)
#
barcin_full_immature_proportions <- barcin_full_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]
ilipinar1_full_immature_proportions <- ilipinar1_full_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]
ilipinar2_full_immature_proportions <- ilipinar2_full_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]
mentese_full_immature_proportions <- mentese_full_assemblage[, .(Immature_Proportion = mean(Immature)), .(Portion = Element_Portion)][order(Portion)]

clusterExport(cl, list('data.table', 'melt', 'ifm_sample', 'theta_finder', 'ifm_fusion_rate', 'barcin_fusion_assemblage', 'barcin_full_immature_proportions', 'ilipinar1_fusion_assemblage', 'ilipinar1_full_immature_proportions', 'mentese_fusion_assemblage', 'mentese_full_immature_proportions', 'ilipinar2_fusion_assemblage', 'ilipinar2_full_immature_proportions', 'nw_anatolian_post', 'nw_anatolian_unmodeled_element_portion_theta'))

system.time(barcin_full_assemblage_simulated_fusion <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_fusion_rate(barcin_fusion_assemblage[, .(ID, Site_No = 1, Specimen_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)][, theta_finder(Specimen_No, Element_Portion, Immature, barcin_full_immature_proportions, element_thetas = cbind(nw_anatolian_post$theta[x, , 1, ], t(nw_anatolian_unmodeled_element_portion_theta[Iteration %in% x & Site_Num %in% 1, .(theta_1, theta_2, theta_3)])), specimen_probs = nw_anatolian_post$specimen_prob[x, , ]), .(ID, Specimen_No, Site_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)])[, .(Iteration = x, Site_No, Fusion_Element, Stage, Fusion, Simulated_Group, N)])))
system.time(ilipinar1_full_assemblage_simulated_fusion <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_fusion_rate(ilipinar1_fusion_assemblage[, .(ID, Site_No = 2, Specimen_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)][, theta_finder(Specimen_No, Element_Portion, Immature, ilipinar1_full_immature_proportions, element_thetas = cbind(nw_anatolian_post$theta[x, , 2, ], t(nw_anatolian_unmodeled_element_portion_theta[Iteration %in% x & Site_Num %in% 2, .(theta_1, theta_2, theta_3)])), specimen_probs = nw_anatolian_post$specimen_prob[x, , ]), .(ID, Specimen_No, Site_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)])[, .(Iteration = x, Site_No, Fusion_Element, Stage, Fusion, Simulated_Group, N)])))
system.time(mentese_full_assemblage_simulated_fusion <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_fusion_rate(mentese_fusion_assemblage[, .(ID, Site_No = 3, Specimen_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)][, theta_finder(Specimen_No, Element_Portion, Immature, mentese_full_immature_proportions, element_thetas = cbind(nw_anatolian_post$theta[x, , 3, ], t(nw_anatolian_unmodeled_element_portion_theta[Iteration %in% x & Site_Num %in% 3, .(theta_1, theta_2, theta_3)])), specimen_probs = nw_anatolian_post$specimen_prob[x, , ]), .(ID, Specimen_No, Site_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)])[, .(Iteration = x, Site_No, Fusion_Element, Stage, Fusion, Simulated_Group, N)])))
system.time(ilipinar2_full_assemblage_simulated_fusion <- rbindlist(parLapply(cl = cl, 1:4000, fun = function(x) ifm_fusion_rate(ilipinar2_fusion_assemblage[, .(ID, Site_No = 4, Specimen_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)][, theta_finder(Specimen_No, Element_Portion, Immature, ilipinar2_full_immature_proportions, element_thetas = cbind(nw_anatolian_post$theta[x, , 4, ], t(nw_anatolian_unmodeled_element_portion_theta[Iteration %in% x & Site_Num %in% 4, .(theta_1, theta_2, theta_3)])), specimen_probs = nw_anatolian_post$specimen_prob[x, , ]), .(ID, Specimen_No, Site_No, Element, Element_Portion, Immature, Fusion_Element, Stage, Fusion)])[, .(Iteration = x, Site_No, Fusion_Element, Stage, Fusion, Simulated_Group, N)])))
#

#combine the assemblages
nw_full_anatolian_fusion <- rbind(barcin_full_assemblage_simulated_fusion, ilipinar1_full_assemblage_simulated_fusion, mentese_full_assemblage_simulated_fusion, ilipinar2_full_assemblage_simulated_fusion)
#
ggplot(nw_full_anatolian_fusion[Stage %in% 3:4, .(N = sum(N)), .(Iteration, Site_No, Fusion, Simulated_Group)][, .(Pct_Fused = N[Fusion %in% "Fused"] / sum(N), N = sum(N)), .(Iteration, Site_No, group = Simulated_Group)][group %in% c("Female", "Male") & N > 0, .(Pct_Fused, group, Plot_Group = paste(Site_No, as.numeric(group), sep = "."))]) + aes(x = Plot_Group, y = Pct_Fused) +
  stat_slab(normalize = "groups", aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(1, 0.95, 0.80), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.8, 0.3), na.translate = F) +
  scale_color_manual(name = "Group", values = c("blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Assemblage", labels = c("1.3" = "Barcin Hoyuk", "2.3" = "Ilipinar 1 (Late Neolithic/Transitional)", "3.3" = "Mentese", "4.3" = "Ilipinar 2 (Early Chalcolithic)"), breaks = c("1.3", "2.3", "3.3", "4.3"),
                   limits = c("1.2", "1.3", "2.2", "2.3", "3.2", "3.3", "4.2", "4.3")) +
  scale_y_continuous(name = "Percentage Fused", labels = scales::percent, limits = c(0, 1.02)) +
  coord_cartesian(expand = FALSE) + labs(title = "Sex-Stratified Fusion Rates for Late-Fusing Epiphyseal Ends") +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.ticks.x = element_blank(), axis.text.x = element_text(angle = 270, size = 10, hjust = 0.05, vjust = 1), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 45, size = 10, hjust = 0.5))
###

ggplot(nw_full_anatolian_fusion[Stage %in% 4 & Fusion %in% "Fused", .(N = sum(N)), .(Iteration, Site_No, Simulated_Group, Fusion)][, .(Site_No, group = Simulated_Group, Plot_Group = paste(Site_No, as.numeric(Simulated_Group), sep = "."), N)]) + aes(y = N, x = Plot_Group) +
  stat_slab(normalize = "groups", slab_type = "histogram", breaks = 0:(nw_full_anatolian_fusion[Stage %in% 4, .(N = sum(N)), .(Fusion, Iteration, Site_No, Simulated_Group)][, max(N)]), aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(0.80, 0.95, 1), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.5, 0.15), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Site", breaks = nw_full_anatolian_fusion[, .N, .(Site_No)][order(Site_No), paste(Site_No, ".2", sep = "")], labels = c("Barcin", "Ilipinar\n(Neolithic)", "Mentese", "Ilipinar\n(Chalcolithic)")) +
  scale_y_continuous(name = "Estimated Count") + coord_cartesian(expand = FALSE) +
  labs(title = "Late-Fusing Elements (Fused)") +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 90, size = 10, hjust = 0.5))
ggplot(nw_full_anatolian_fusion[Stage %in% 4 & Fusion %in% "Unfused", .(N = sum(N)), .(Iteration, Site_No, Simulated_Group, Fusion)][, .(Site_No, group = Simulated_Group, Plot_Group = paste(Site_No, as.numeric(Simulated_Group), sep = "."), N)]) + aes(y = N, x = Plot_Group) +
  stat_slab(normalize = "groups", slab_type = "histogram", breaks = 0:(nw_full_anatolian_fusion[Stage %in% 4, .(N = sum(N)), .(Fusion, Iteration, Site_No, Simulated_Group)][, max(N)]), aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(0.80, 0.95, 1), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.5, 0.15), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Site", breaks = nw_full_anatolian_fusion[, .N, .(Site_No)][order(Site_No), paste(Site_No, ".2", sep = "")], labels = c("Barcin", "Ilipinar\n(Neolithic)", "Mentese", "Ilipinar\n(Chalcolithic)")) +
  scale_y_continuous(name = "Estimated Count") + coord_cartesian(expand = FALSE) +
  labs(title = "Late-Fusing Elements (Unfused)") +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 90, size = 10, hjust = 0.5))
ggplot(nw_full_anatolian_fusion[Stage %in% 4, .(N = sum(N)), .(Iteration, Site_No, Simulated_Group)][, .(Site_No, group = Simulated_Group, Plot_Group = paste(Site_No, as.numeric(Simulated_Group), sep = "."), N)]) + aes(y = N, x = Plot_Group) +
  stat_slab(normalize = "groups", slab_type = "histogram", breaks = 0:(nw_full_anatolian_fusion[Stage %in% 4, .(N = sum(N)), .(Iteration, Site_No, Simulated_Group)][, max(N)]), aes(fill = group, fill_ramp = stat(cut_cdf_qi(cdf, .width = c(0.80, 0.95, 1), labels = scales::percent_format())))) +
  stat_pointinterval(.width = c(0.8, 0.95), aes(color = group), position = position_dodge(width = 0.2, preserve = "single")) +
  scale_fill_ramp_discrete(name = "Interval", range = c(0.5, 0.15), na.translate = F) +
  scale_color_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_fill_manual(name = "Group", values = c("black", "blue", "red"), na.translate = F) +
  scale_x_discrete(name = "Site", breaks = nw_full_anatolian_fusion[, .N, .(Site_No)][order(Site_No), paste(Site_No, ".2", sep = "")], labels = c("Barcin", "Ilipinar\n(Neolithic)", "Mentese", "Ilipinar\n(Chalcolithic)")) +
  scale_y_continuous(name = "Estimated Count") + coord_cartesian(expand = FALSE) +
  labs(title = "Late-Fusing Elements") +
  theme_classic() + theme(legend.text = element_text(size = 10), legend.position = "bottom", legend.justification = c("center"), legend.box.just = "right", legend.margin = margin(6, 6, 6, 6), axis.text.x = element_text(size = 10), axis.title = element_text(size = 16), axis.text.y = element_text(angle = 90, size = 10, hjust = 0.5))
#
nw_full_anatolian_fusion[Stage %in% 4, .(N = sum(N)), .(Iteration, Site_No, Fusion, Simulated_Group)][Simulated_Group %in% c("Female", "Male"), .(Pct_Fused = N[Fusion %in% "Fused"] / sum(N)), .(Iteration, Site_No, Simulated_Group)][, .(Female_Minus_Male = Pct_Fused[Simulated_Group %in% "Female"] - Pct_Fused[Simulated_Group %in% "Male"]), .(Iteration, Site_No)][, mean(Female_Minus_Male >= 0, na.rm = T), Site_No]
