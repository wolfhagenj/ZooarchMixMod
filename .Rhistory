ilipinar_measured_bos_primigenius_N = ilipinar_data[Taxon %in% "Bos primigenius", .N],
ilipinar_measured_bos_spp_N = ilipinar_data[Taxon %in% "Bos", .N],
ilipinar_full_bos_primigenius_N = ilipinar1_full_assemblage[Taxon %in% "Bos primigenius", .N] + ilipinar2_full_assemblage[Taxon %in% "Bos primigenius", .N],
ilipinar_full_bos_spp_N = ilipinar1_full_assemblage[Taxon %in% "Bos", .N] + ilipinar2_full_assemblage[Taxon %in% "Bos", .N],
barcin_age_observation = nw_anatolian_demographic_observations[Site_No %in% 1, ifelse(N_Ageable > 0, paste0(N_Unfused, " / ", N_Ageable, " (", round(100 * (N_Unfused / N_Ageable), 0), "%)"), paste0(N_Unfused, " / ", N_Ageable))],
ilipinar1_age_observation = nw_anatolian_demographic_observations[Site_No %in% 2, ifelse(N_Ageable > 0, paste0(N_Unfused, " / ", N_Ageable, " (", round(100 * (N_Unfused / N_Ageable), 0), "%)"), paste0(N_Unfused, " / ", N_Ageable))],
mentese_age_observation = nw_anatolian_demographic_observations[Site_No %in% 3, ifelse(N_Ageable > 0, paste0(N_Unfused, " / ", N_Ageable, " (", round(100 * (N_Unfused / N_Ageable), 0), "%)"), paste0(N_Unfused, " / ", N_Ageable))],
ilipinar2_age_observation = nw_anatolian_demographic_observations[Site_No %in% 4, ifelse(N_Ageable > 0, paste0(N_Unfused, " / ", N_Ageable, " (", round(100 * (N_Unfused / N_Ageable), 0), "%)"), paste0(N_Unfused, " / ", N_Ageable))],
barcin_sex_observation = nw_anatolian_demographic_observations[Site_No %in% 1, ifelse(N_Sexable > 0, paste0(N_Female, " / ", N_Sexable, " (", round(100 * (N_Female / N_Sexable), 0), "%)"), paste0(N_Female, " / ", N_Sexable))],
ilipinar1_sex_observation = nw_anatolian_demographic_observations[Site_No %in% 2, ifelse(N_Sexable > 0, paste0(N_Female, " / ", N_Sexable, " (", round(100 * (N_Female / N_Sexable), 0), "%)"), paste0(N_Female, " / ", N_Sexable))],
mentese_sex_observation = nw_anatolian_demographic_observations[Site_No %in% 3, ifelse(N_Sexable > 0, paste0(N_Female, " / ", N_Sexable, " (", round(100 * (N_Female / N_Sexable), 0), "%)"), paste0(N_Female, " / ", N_Sexable))],
ilipinar2_sex_observation = nw_anatolian_demographic_observations[Site_No %in% 4, ifelse(N_Sexable > 0, paste0(N_Female, " / ", N_Sexable, " (", round(100 * (N_Female / N_Sexable), 0), "%)"), paste0(N_Female, " / ", N_Sexable))]
)
####Summarize the elemental composition of the archaeological assemblages####
table_4 <- pinarbasi_mixmod_data[, .N, .(Element_Portion, Element, Measurement = tstrsplit(Measurement, "_")[[2]])][order(Element_Portion), .(`Element Portion` = c("Astragalus", "Calcaneus", "Humerus", "Metacarpal (Distal)", "Metatarsal (Distal)", "Metatarsal (Proximal)", "First Phalanx", "Radius (Distal)", "Tibia (Distal)", "Tibia (Proximal)"), Measurement, N)]
table_5 <- data.table(reshape2::dcast(nw_anatolian_mixmod_data[, .N, .(Element_Portion, Element, Site_No, Site)][order(Site_No, Element), .(Element, Site, N)], Element ~ Site, fun.aggregate = sum, value.var = "N", fill = 0, margins = "Element"))[, .(`Element Portion` = c("Astragalus", "Calcaneus", "Femur (Distal)", "Femur (Proximal)", "Humerus", "Metacarpal (Distal)", "Metacarpal (Proximal)", "Metatarsal (Distal)", "Metatarsal (Proximal)", "First Phalanx", "Second Phalanx", "Radius (Distal)", "Radius (Proximal)", "Scapula", "Tibia (Distal)", "Tibia (Proximal)", "Total"), `Barcın Höyük` = Barcin, `Ilıpınar Höyük (Late Neolithic/Transitional)` = `Ilipinar 1 (Late Neolithic/Transitional)`, `Ilıpınar Höyük (Early Chalcolithic)` = `Ilipinar 2 (Early Chalcolithic)`, `Menteşe Höyük` = Mentese)]
#
####Pinarbasi B fit####
#Format the data for Stan and run the analyses
pinarbasi_mixmod_standata <- list(
#Sample sizes
N_Specimens = pinarbasi_mixmod_data[, .N, Specimen_No][, .N],
N_Measurements = pinarbasi_mixmod_data[, .N],
N_Element_Portions = pinarbasi_mixmod_data[, .N, Element_Portion][, .N],
N_Measurement_Sets = pinarbasi_mixmod_data[, .N, Measurement_Set][, .N],
#Specimen observations
Element_Portion = pinarbasi_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Element_Portion],
Immature = pinarbasi_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Immature],
Immature_Proportion = as.matrix(dcast(pinarbasi_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(pinarbasi_mixmod_data[, .N, Element_Portion][, .N] + 1)],
#Measurement observations
Measurement_obs = pinarbasi_mixmod_data[, Measurement_value],
Measurement_sd = pinarbasi_mixmod_data[, Measurement_value * 0.01],
Reference_obs = pinarbasi_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value],
Reference_sd = pinarbasi_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value * 0.01],
Measurement_Set = pinarbasi_mixmod_data[, Measurement_Set],
Specimen = pinarbasi_mixmod_data[, Specimen_No],
#Demographic observations
Immature_obs = pinarbasi_demographic_observations[, N_Unfused],
Immature_obs_n = pinarbasi_demographic_observations[, N_Ageable],
Female_obs = pinarbasi_demographic_observations[, N_Female],
Female_obs_n = pinarbasi_demographic_observations[, N_Sexable],
#Prior distributions for hyper-parameters
prior_theta_raw_1 = c(-0.5, 1.5),
prior_theta_raw_2 = c(0, 1.5),
prior_mu_female = c(0, 0.1),
prior_logdelta_immature = c(-3.5, 0.4),
prior_logdelta_male = c(-2.7, 0.1),
prior_logsigma_immature = c(-3.05, 0.1),
prior_logsigma_female = c(-3.1, 0.1),
prior_logsigma_male = c(-3.1, 0.1)
)
singlesite_mixture_stanmodel <- cmdstan_model("./Scripts/LSI_mixture_model_singlesite.stan")
pinarbasi_samples <- singlesite_mixture_stanmodel$sample(
data = pinarbasi_mixmod_standata,
chains = 4,
parallel_chains = 4,
refresh = 250,
adapt_delta = 0.90,
seed = 1763576974,
max_treedepth = 15
)
pinarbasi_stanfit <- rstan::read_stan_csv(pinarbasi_samples$output_files())
pinarbasi_post <- extract(pinarbasi_stanfit)
table_pinarbasi_model_parameters <- data.table(pinarbasi_samples$summary(c("grand_theta", "grand_mu_immature", "grand_mu_female", "grand_mu_male", "grand_sigma_immature", "grand_sigma_female", "grand_sigma_male")))[, .(`Posterior Mean` = round(mean, 2), `Posterior Median` = round(median, 2), `Posterior SD` = round(sd, 2), `$5\\%$ Quantile` = round(q5, 2), `$95\\%$ Quantile` = round(q95, 2), `$\\hat{R}$` = round(rhat, 2), `Effective Sample Size (Bulk)` = round(ess_bulk, 0), `Effective Sample Size (Tail)` = round(ess_tail, 0))]
#
pinarbasi_posterior_summary <- list(
pinarbasi_pi1_median = paste0(round(100 * median(pinarbasi_post$p_immature), 0), "%"),
pinarbasi_pi1_95CI = paste0(round(100 * quantile(pinarbasi_post$p_immature, 0.025), 0), "-", round(100 * quantile(pinarbasi_post$p_immature, 0.975), 0), "%"),
pinarbasi_age_observation = pinarbasi_demographic_observations[, paste0("(", N_Unfused, " / ", N_Ageable, " = ", round(100 * (N_Unfused / N_Ageable), 0), "%)")],
pinarbasi_femaletheta_over50 = paste0(round(100 * mean(pinarbasi_post$theta_female >= 0.5), 0), "%"),
pinarbasi_measured_specimens_N = pinarbasi_measured_assemblage[, .N],
pinarbasi_modeled_specimens_N = pinarbasi_modeled_assemblage[, .N],
pinarbasi_full_specimens_N = pinarbasi_full_assemblage[, .N],
overall_female_size_range = paste0(round(100 * quantile(pinarbasi_post$grand_mu_female, 0.025), 0), "-", round(100 * quantile(pinarbasi_post$grand_mu_female, 0.975), 0)),
overall_female_pct_range = paste0(round(100 * quantile(pinarbasi_post$grand_theta[, 2], 0.025), 0), "-", round(100 * quantile(pinarbasi_post$grand_theta[, 2], 0.975), 0), "%")
)
pinarbasi_posterior_summary
#
pinarbasi_posterior_summary <- list(
pinarbasi_pi1_median = paste0(round(100 * median(pinarbasi_post$p_immature), 0), "%"),
pinarbasi_pi1_95CI = paste0(round(100 * quantile(pinarbasi_post$p_immature, 0.025), 0), "-", round(100 * quantile(pinarbasi_post$p_immature, 0.975), 0), "%"),
pinarbasi_age_observation = pinarbasi_demographic_observations[, paste0("(", N_Unfused, " / ", N_Ageable, " = ", round(100 * (N_Unfused / N_Ageable), 0), "%)")],
pinarbasi_femaletheta_over50 = paste0(round(100 * mean(pinarbasi_post$theta_female >= 0.5), 0), "%"),
pinarbasi_measured_specimens_N = pinarbasi_measured_assemblage[, .N],
pinarbasi_modeled_specimens_N = pinarbasi_modeled_assemblage[, .N],
pinarbasi_full_specimens_N = pinarbasi_full_assemblage[, .N],
overall_female_size_range = paste0(round(quantile(pinarbasi_post$grand_mu_female, 0.025), 2), "-", round(quantile(pinarbasi_post$grand_mu_female, 0.975), 2)),
overall_female_pct_range = paste0(round(100 * quantile(pinarbasi_post$grand_theta[, 2], 0.025), 0), "-", round(100 * quantile(pinarbasi_post$grand_theta[, 2], 0.975), 0), "%")
)
pinarbasi_posterior_summary
#
pinarbasi_posterior_summary <- list(
pinarbasi_pi1_median = paste0(round(100 * median(pinarbasi_post$p_immature), 0), "%"),
pinarbasi_pi1_95CI = paste0(round(100 * quantile(pinarbasi_post$p_immature, 0.025), 0), "-", round(100 * quantile(pinarbasi_post$p_immature, 0.975), 0), "%"),
pinarbasi_age_observation = pinarbasi_demographic_observations[, paste0("(", N_Unfused, " / ", N_Ageable, " = ", round(100 * (N_Unfused / N_Ageable), 0), "%)")],
pinarbasi_femaletheta_over50 = paste0(round(100 * mean(pinarbasi_post$theta_female >= 0.5), 0), "%"),
pinarbasi_measured_specimens_N = pinarbasi_measured_assemblage[, .N],
pinarbasi_modeled_specimens_N = pinarbasi_modeled_assemblage[, .N],
pinarbasi_full_specimens_N = pinarbasi_full_assemblage[, .N],
overall_female_size_range = paste0(round(quantile(pinarbasi_post$grand_mu_female, 0.025), 2), " - ", round(quantile(pinarbasi_post$grand_mu_female, 0.975), 2)),
overall_female_pct_range = paste0(round(100 * quantile(pinarbasi_post$grand_theta[, 2], 0.025), 0), "-", round(100 * quantile(pinarbasi_post$grand_theta[, 2], 0.975), 0), "%")
)
pinarbasi_posterior_summary
####NW Anatolain fit####
nw_anatolian_mixmod_standata <- list(
#Sample sizes
N_Sites = nw_anatolian_mixmod_data[, .N, Site_No][, .N],
N_Specimens = nw_anatolian_mixmod_data[, .N, Specimen_No][, .N],
N_Measurements = nw_anatolian_mixmod_data[, .N],
N_Element_Portions = nw_anatolian_mixmod_data[, .N, Element_Portion][, .N],
N_Measurement_Sets = nw_anatolian_mixmod_data[, .N, Measurement_Set][, .N],
#Specimen observations
Site = nw_anatolian_mixmod_data[, .N, .(Specimen_No, Site_No, Element_Portion, Immature)][order(Specimen_No), Site_No],
Element_Portion = nw_anatolian_mixmod_data[, .N, .(Specimen_No, Site_No, Element_Portion, Immature)][order(Specimen_No), Element_Portion],
Immature = nw_anatolian_mixmod_data[, .N, .(Specimen_No, Site_No, Element_Portion, Immature)][order(Specimen_No), Immature],
Immature_Proportion = as.matrix(dcast(nw_anatolian_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(nw_anatolian_mixmod_data[, .N, Element_Portion][, .N] + 1)],
#Measurement observations
Measurement_obs = nw_anatolian_mixmod_data[, Measurement_value],
Measurement_sd = nw_anatolian_mixmod_data[, Measurement_value * 0.01],
Reference_obs = nw_anatolian_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value],
Reference_sd = nw_anatolian_mixmod_data[, .N, .(Measurement_Set, Reference_value)][order(Measurement_Set), Reference_value * 0.01],
Measurement_Set = nw_anatolian_mixmod_data[, Measurement_Set],
Specimen = nw_anatolian_mixmod_data[, Specimen_No],
#Demographic observations
N_Immature_obs = nw_anatolian_demographic_observations[, .N],
Immature_obs_site = nw_anatolian_demographic_observations[, Site_No],
Immature_obs = nw_anatolian_demographic_observations[, N_Unfused],
Immature_obs_n = nw_anatolian_demographic_observations[, N_Ageable],
N_Female_obs = nw_anatolian_demographic_observations[, .N],
Female_obs_site = nw_anatolian_demographic_observations[, Site_No],
Female_obs = nw_anatolian_demographic_observations[, N_Female],
Female_obs_n = nw_anatolian_demographic_observations[, N_Sexable],
#Prior distributions for hyper-parameters
prior_theta_raw_1 = c(-0.5, 1.5),
prior_theta_raw_2 = c(0, 1.5),
prior_mu_female = c(-0.1, 0.1),
prior_logdelta_immature = c(-3.5, 0.5),
prior_logdelta_male = c(-2, 0.5),
prior_logsigma_immature = c(-3.05, 0.25),
prior_logsigma_female = c(-3.1, 0.2),
prior_logsigma_male = c(-3.1, 0.2)
)
multisite_mixture_stanmodel <- cmdstan_model("./Scripts/LSI_mixture_model_multisite.stan")
nw_anatolian_multisite_samples <- multisite_mixture_stanmodel$sample(
data = nw_anatolian_mixmod_standata,
chains = 4,
parallel_chains = 4,
refresh = 250,
adapt_delta = 0.99,
seed = 1527876519,
max_treedepth = 15
)
5+5
nw_anatolian_multisite_samples <- multisite_mixture_stanmodel$sample(
data = nw_anatolian_mixmod_standata,
chains = 4,
parallel_chains = 4,
refresh = 250,
adapt_delta = 0.90,
#  seed = 1527876519,
max_treedepth = 15
)
#
nw_anatolian_multisite_stanfit <- rstan::read_stan_csv(nw_anatolian_multisite_samples$output_files())
nw_anatolian_post <- extract(nw_anatolian_multisite_stanfit)
####Summarizing the archaeological assemblages####
#
nw_anatolian_posterior_summary <- list(
ilipinar2_avg_contrast = ilipinar2_mu2_contrasts[, .(avg_contrast = mean(Contrast)), Site][, paste0(round(100 * min(avg_contrast), 0), "-", round(100 * max(avg_contrast), 0), "%")],
ilipinar2_sex_fusion_bias = paste0(nw_full_anatolian_fusion[Stage %in% 4 & Site_No %in% 4, .(N = sum(N)), .(Iteration, Fusion, Simulated_Group)][Simulated_Group %in% c("Female", "Male"), .(Pct_Fused = N[Fusion %in% "Fused"] / sum(N)), .(Iteration, Simulated_Group)][, .(Female_Minus_Male = Pct_Fused[Simulated_Group %in% "Female"] - Pct_Fused[Simulated_Group %in% "Male"]), .(Iteration)][, round(100 * mean(Female_Minus_Male >= 0, na.rm = T), 0)], "%"),
barcin_thetafemale_over60 = paste0(round(100 * mean(nw_anatolian_post$site_theta_female[, 1] >= 0.60), 0), "%"),
barcin_thetafemale_over75 = paste0(round(100 * mean(nw_anatolian_post$site_theta_female[, 1] >= 0.75), 0), "%"),
ilipinar1_thetafemale_over80 = paste0(round(100 * mean(nw_anatolian_post$site_theta_female[, 2] > 0.80), 0), "%")
)
nw_anatolian_posterior_summary
rstan::stan_version()
rstudioapi::versionInfo()$version
rstudioapi::versionInfo()$release_name
packageVersion("doParallel")
citation("parallel")
packageVersion("parallel")
packageVersion("zoolog")
packageVersion("rnaturalearthdata")
?rstan::read_stan_csv
?cmdstanr::output_files
library("boot")
library("Cairo")
library("cmdstanr")
library("data.table")
library("doParallel")
library("ggdist")
library("ggplot2")
library("ggpubr")
library("ggrepel")
library("kableExtra")
library("knitr")
library("mixtools")
library("parallel")
library("readxl")
library("rnaturalearth")
library("rnaturalearthdata")
library("rstan")
library("sf")
library("zoolog")
set.seed(1234567890)
sheep_data <- fread("./Data/1-s2.0-S0305440312000301-mmc1.csv", nrows = 356) #accessible from https://doi.org/10.1016/j.jas.2012.01.018 supplementary table, resaved as a .CSV
#Make variable for immature animals (`Days at Death` <= 365), female animals (not-immature), and male/castrated animals (not-immature)
sheep_data[, is.Immature := ifelse(`Days at Death` <= 365, 1, 0)]
sheep_data[, is.Female := ifelse(`Days at Death` > 365 & Sex %in% "Female", 1, 0)]
sheep_data[, is.Male := ifelse(`Days at Death` > 365 & Sex %in% c("Castrate", "Male"), 1, 0)]
#Reframe the sheep data to be set in a long format
sheep_longdata <- melt(sheep_data, id.vars = c("Accession  no", "Sex", "is.Immature", "is.Female", "is.Male", "Sca_coracoid_fus", "Hum_prox_fus", "Hum_dist_fus", "Rad_prox_fus", "Rad_dist_fus", "Mtc_dist_fus", "Pel_acetabulum_fus", "Fem_caput_fus", "Fem_dist_fus", "Tib_prox_fus", "Tib_dist_fus", "Mtt_dist_fus", "Cal_prox_fus"), measure.vars = names(sheep_data[, Sca_GLP:Cal_GDde]), variable.name = "Measurement", value.name = "Measurement_value")
sheep_longdata[, Element := tstrsplit(Measurement, "_")[1]]
#Get the standard animal from zoolog
sheep_standard_animal <- data.table(referencesDatabase$`Ovis orientalis`$Uerpmann)
#Keep only limb breadth bone measurements for the mixture model
sheep_mixmod_data <- sheep_longdata[Measurement %in% c("Sca_GLP", "Hum_Bd", "Hum_BT", "Rad_Bp", "Rad_Bd", "Mtc_Bp", "Mtc_BFd", "Fem_Bd", "Tib_Bd", "Ast_Bd", "Mtt_Bp", "Mtt_BFd")]
#Rename standard animal measurements to match the names in the dataset
sheep_standard_animal[EL %in% "Scapula", c("Element", "Measurement") := .("Sca", paste("Sca", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Humerus", c("Element", "Measurement") := .("Hum", paste("Hum", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Radius", c("Element", "Measurement") := .("Rad", paste("Rad", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Metacarpus", c("Element", "Measurement") := .("Mtc", paste("Mtc", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Femur", c("Element", "Measurement") := .("Fem", paste("Fem", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Tibia", c("Element", "Measurement") := .("Tib", paste("Tib", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Astragalus", c("Element", "Measurement") := .("Ast", paste("Ast", Measure, sep = "_"))]
sheep_standard_animal[EL %in% "Metatarsus", c("Element", "Measurement") := .("Mtt", paste("Mtt", Measure, sep = "_"))]
#Rename some measurement name mismatches
sheep_mixmod_data[Measurement %in% "Mtc_BFd", Measurement := "Mtc_Bd"]
sheep_mixmod_data[Measurement %in% "Mtt_BFd", Measurement := "Mtt_Bd"]
#Join the standard animal reference to the dataset (allows for easier identification of relevant standard measurement)
sheep_mixmod_data <- sheep_mixmod_data[sheep_standard_animal[, .(Measurement, Reference_value = Standard)], on = "Measurement"][!is.na(`Accession  no`)]
#Create "element portion" and "measurement set" numbers for the model (needs numeric labels)
#note that, by default, these are ordered alphabetically. Can also assign specific orders if desirable
sheep_mixmod_data[, c("Dimension", "Element_Portion") := .(as.numeric(as.factor(Measurement)), as.numeric(as.factor(Element)))]
#Create "specimen" labels to link meausrements from the same bone specimen (model needs numeric labels)
sheep_mixmod_data[, "Specimen_No" := as.numeric(as.factor(paste(`Accession  no`, Element, sep = "_")))]
sheep_mixmod_data[, "Individual_No" := as.numeric(as.factor(`Accession  no`))]
#Immature: identify whether specimens COULD be immature based on element portion and fusion status, if relevant
sheep_mixmod_data[Element %in% c("Sca", "Ast"), Immature := 1] #does not fuse / subject to post-fusion growth and has no relevant fusion data to exclude immature status
sheep_mixmod_data[Element %in% c("Hum"), Immature := as.numeric(Hum_prox_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Rad", Immature := as.numeric(Rad_dist_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Mtc", Immature := as.numeric(Mtc_dist_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Fem", Immature := as.numeric(Fem_dist_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Tib", Immature := as.numeric(Tib_prox_fus %in% c("fu", "fg") == F)]
sheep_mixmod_data[Element %in% "Mtt", Immature := as.numeric(Mtt_dist_fus %in% c("fu", "fg") == F)]
#Group: category for immature vs female vs male/castrate (for checking accuracy)
sheep_mixmod_data[, Group := ifelse(is.Immature %in% 1, "Immature", ifelse(is.Female %in% 1, "Female", ifelse(is.Male %in% 1, "Male", NA)))]
#Demographic information: collecting fusion data on proximal and middle phalanges and sex data on fused pelves
sheep_phx_fusion <- melt(sheep_data[, .(`Accession  no`, is.Immature, is.Female, is.Male, Pph_fore_int_fus, Pph_fore_ext_fus, Pph_dist_int_fus, Pph_dist_ext_fus, Mph_fore_int_fus, Mph_fore_ext_fus, Mph_dist_int_fus, Mph_dist_ext_fus)], id.vars = c("Accession  no", "is.Immature", "is.Female", "is.Male"), variable.name = "Phalanx", value.name = "Fusion")[Fusion %in% "na" == F]
sheep_phx_fusion[, Element := ifelse(grepl("Pph", Phalanx), "PH1", "PH2")]
sheep_pelvis_sex <- sheep_data[Pel_acetabulum_fus %in% "fu", .(`Accession  no`, is.Immature, is.Female, is.Male)][is.Immature %in% 0, .(`Accession  no`, Sex = ifelse(is.Female %in% 1, "Female", ifelse(is.Male %in% 1, "Male", NA)))]
#Single assemblage simulation: 150 measured element portions, probabilities remain the same as the underlying population
single_assemblage_mixmod_data <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 150, replace = F)]
#Re-assign numeric codes for element portions, measurement sets, and individual specimens (to prevent mismatches/overlap)
single_assemblage_mixmod_data[, Dimension := as.numeric(as.factor(Measurement))]
single_assemblage_mixmod_data[, Element_Portion := as.numeric(as.factor(Element))]
single_assemblage_mixmod_data[, Original_Specimen_No := Specimen_No] #allows the creation of modeled assemblages without resampling
single_assemblage_mixmod_data[, Specimen_No := as.numeric(as.factor(Specimen_No))]
single_assemblage_mixmod_data[, Site_No := 1]
#Multi-site simulation: 15 sites, varying sample size, expected composition, and body size manipulations
#Sites 1-5: no variation in composition to the underlying population
#Sites 6-10: 20% immature, 70% female, 10% male
#Sites 11-15: 5% immature, 35% female, 60% male
#Size variation in Sites 3-5, 8-10, and 13-15
#Sample sizes: N = 10 element portions in Sites 2, 7, and 12 (N = 30 element portions otherwise)
#straight from the data, 30 measured specimens
site_01 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
#straight from the data, 10 measured specimens
site_02 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 10, replace = F)]
#30 measured specimens, increase size
site_03 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
site_03[, Measurement_value := Measurement_value * 1.20]
#30 measured specimens, decrease size
site_04 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
site_04[, Measurement_value := Measurement_value * 0.80]
#30 measured specimens, increase sexual dimorphism
site_05 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F)]
site_05[is.Male %in% 1, Measurement_value := Measurement_value * 1.20]
#20% immature, 70% female, 10% male
#have to adjust probabilities of choosing based on underlying proportions of the dataset
#20% immature, 70% female, 10% male; 30 measured specimens
site_06 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
#20% immature, 70% female, 10% male; 10 measured specimens
site_07 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 10, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
#20% immature, 70% female, 10% male; 30 measured specimens, increased size
site_08 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
site_08[, Measurement_value := Measurement_value * 1.20]
#20% immature, 70% female, 10% male; 30 measured specimens, decreased size
site_09 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
site_09[, Measurement_value := Measurement_value * 0.80]
#20% immature, 70% female, 10% male; 30 measured specimens, increased sexual dimorphism
site_10 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])]
site_10[is.Male %in% 1, Measurement_value := Measurement_value * 1.20]
#5% immature, 35% female, 60% male
#have to adjust probabilities of choosing based on underlying proportions of the dataset
#5% immature, 35% female, 60% male; 30 measured specimens
site_11 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
#5% immature, 35% female, 60% male; 10 measured specimens
site_12 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 10, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
#5% immature, 35% female, 60% male; 30 measured specimens, increased size
site_13 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
site_13[, Measurement_value := Measurement_value * 1.20]
#5% immature, 35% female, 60% male; 30 measured specimens, decreased size
site_14 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
site_14[, Measurement_value := Measurement_value * 0.80]
#5% immature, 35% female, 60% male; 30 measured specimens, increased sexual dimorphism
site_15 <- sheep_mixmod_data[Specimen_No %in% sample(1:sheep_mixmod_data[, .N, Specimen_No][, .N], 30, replace = F, prob = sheep_mixmod_data[, .N, .(Specimen_No, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])]
site_15[is.Male %in% 1, Measurement_value := Measurement_value * 1.20]
#Bring all the assemblages together
multisite_mixmod_data <- rbind(data.table(Site_No = 1, site_01),
data.table(Site_No = 2, site_02),
data.table(Site_No = 3, site_03),
data.table(Site_No = 4, site_04),
data.table(Site_No = 5, site_05),
data.table(Site_No = 6, site_06),
data.table(Site_No = 7, site_07),
data.table(Site_No = 8, site_08),
data.table(Site_No = 9, site_09),
data.table(Site_No = 10, site_10),
data.table(Site_No = 11, site_11),
data.table(Site_No = 12, site_12),
data.table(Site_No = 13, site_13),
data.table(Site_No = 14, site_14),
data.table(Site_No = 15, site_15))
#Re-assign numeric codes for element portions, measurement sets, and individual specimens (to prevent mismatches/overlap)
multisite_mixmod_data[, Dimension := as.numeric(as.factor(Measurement))]
multisite_mixmod_data[, Element_Portion := as.numeric(as.factor(Element))]
multisite_mixmod_data[, Original_Specimen_No := Specimen_No] #allows the creation of modeled assemblages without resampling the measured specimens
multisite_mixmod_data[, Specimen_No := as.numeric(as.factor(paste(Site_No, Specimen_No, sep = ".")))]
##Demographic observations for the simulations: simulate observations from sheep_phx_fusion and sheep_pelvis_sex
#Single assemblage simulation
single_assemblage_demographic_observations <- data.table(Site = "Single Assemblage", Site_No = 1, N_Unfused = sheep_phx_fusion[sample(1:.N, 50)][Fusion %in% c("u", "fo"), .N], N_Ageable = 50, N_Female = sheep_pelvis_sex[sample(1:.N, 15)][Sex %in% "Female", .N], N_Sexable = 15)
#Multi-site simulation
multisite_demographic_observations <- rbind(
data.table(Site = "Site 1", Site_No = 1, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 2", Site_No = 2, N_Unfused = sheep_phx_fusion[sample(1:.N, 10, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 15, N_Female = sheep_pelvis_sex[sample(1:.N, 4, replace = F)][Sex %in% "Female", .N], N_Sexable = 4),
data.table(Site = "Site 3", Site_No = 3, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 4", Site_No = 4, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 5", Site_No = 5, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F)][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F)][Sex %in% "Female", .N], N_Sexable = 8),
#20% immature, 70% female, 10% male
data.table(Site = "Site 6", Site_No = 6, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 7", Site_No = 7, N_Unfused = sheep_phx_fusion[sample(1:.N, 10, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 15, N_Female = sheep_pelvis_sex[sample(1:.N, 4, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 4),
data.table(Site = "Site 8", Site_No = 8, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 9", Site_No = 9, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 10", Site_No = 10, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.2 / (384 / 2752), ifelse(is.Female %in% 1, 0.7 / (1312 / 2752), ifelse(is.Male %in% 1, 0.1 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.7 / 0.8) / (164 / 308), ifelse(Sex %in% "Male", (0.1 / 0.8) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
#5% immature, 35% female, 60% male
data.table(Site = "Site 11", Site_No = 11, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 12", Site_No = 12, N_Unfused = sheep_phx_fusion[sample(1:.N, 10, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 15, N_Female = sheep_pelvis_sex[sample(1:.N, 4, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 4),
data.table(Site = "Site 13", Site_No = 13, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 14", Site_No = 14, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8),
data.table(Site = "Site 15", Site_No = 15, N_Unfused = sheep_phx_fusion[sample(1:.N, 30, replace = F, prob = ifelse(is.Immature %in% 1, 0.05 / (384 / 2752), ifelse(is.Female %in% 1, 0.35 / (1312 / 2752), ifelse(is.Male %in% 1, 0.60 / (1056 / 2752), NA))))][Fusion %in% c("u", "fo"), .N], N_Ageable = 30, N_Female = sheep_pelvis_sex[sample(1:.N, 8, replace = F, prob = ifelse(Sex %in% "Female", (0.35 / 0.95) / (164 / 308), ifelse(Sex %in% "Male", (0.60 / 0.95) / (144 / 308), NA)))][Sex %in% "Female", .N], N_Sexable = 8)
)
#Simulate the modeled assemblages
#single assemblage simulation
single_measured_assemblage <- single_assemblage_mixmod_data[, .N, .(Individual_No, Specimen_No, Original_Specimen_No, Element, Element_Portion, Immature, Group, Site_No)]
single_modeled_assemblage <- rbind(single_measured_assemblage,
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% single_measured_assemblage[, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][, Specimen_No], 600, replace = F)][, .(Specimen_No = NA, Site_No = 1, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)])
#multisite assemblage simulation
multisite_measured_assemblage <- multisite_mixmod_data[, .N, .(Individual_No, Specimen_No, Original_Specimen_No, Element, Element_Portion, Immature, Group, Site_No)]
multisite_modeled_assemblage <- rbind(multisite_measured_assemblage,
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 1, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 1, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 2, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 40, replace = F)][, .(Specimen_No = NA, Site_No = 2, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 3, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 3, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 4, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 4, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 5, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F)][, .(Specimen_No = NA, Site_No = 5, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
#Sites 6-10: 20% immature, 70% female, 10% male
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 6, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 6, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 6, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 7, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 40, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 7, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 7, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 8, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 8, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 8, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 9, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 9, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 9, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 10, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 10, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.20 / (384 / 2848), ifelse(Group %in% "Female", 0.70 / (1312 / 2848), ifelse(Group %in% "Male", 0.10 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 10, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
#Sites 11-15: 5% immature, 35% female, 60% male
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 11, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 11, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 11, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 12, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 40, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 12, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 12, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 13, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 13, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 13, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 14, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 14, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 14, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)],
sheep_mixmod_data[Specimen_No %in% sample(sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 15, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion)][order(Specimen_No), Specimen_No], 120, replace = F, prob = sheep_mixmod_data[Specimen_No %in% multisite_measured_assemblage[Site_No %in% 15, Original_Specimen_No] == F, .N, .(Individual_No, Specimen_No, Element_Portion, Group)][order(Specimen_No), ifelse(Group %in% "Immature", 0.05 / (384 / 2848), ifelse(Group %in% "Female", 0.35 / (1312 / 2848), ifelse(Group %in% "Male", 0.60 / (1152 / 2848), NA)))])][, .(Specimen_No = NA, Site_No = 15, .N), .(Individual_No, Original_Specimen_No = Specimen_No, Element, Element_Portion, Immature, Group)])
#Table 4 information (included dimensions for the simulations)
table_4 <- data.table(`Element Portion` = c("Scapula", "Humerus", "Humerus", "Radius", "Radius", "Metacarpus", "Metacarpus", "Femur", "Tibia", "Astragalus", "Metatarsus", "Metatarsus"),
`Dimension` = c("GLP", "Bd", "BT", "Bp", "Bd", "Bp", "Bd", "Bd", "Bd", "Bd", "Bp", "Bd"))
#Summarize the simulations
simulation_summary <- list(
single_assemblage_n_specimens = single_assemblage_mixmod_data[, .N, Specimen_No][, .N],
single_assemblage_n_measurements = single_assemblage_mixmod_data[, .N],
single_assemblage_n_indivudals = single_assemblage_mixmod_data[, .N, `Accession  no`][, .N],
multi_assemblage_n_sites = multisite_mixmod_data[, .N, Site_No][, .N],
single_assemblage_n_modeled_specimens = single_modeled_assemblage[is.na(Specimen_No), .N],
single_assemblage_n_modeled_assemblage = single_modeled_assemblage[, .N]
)
#Table 5 information (elemental composition of the simulated assemblages)
table_5 <- dcast(rbind(single_assemblage_mixmod_data[, .(.N, Assemblage = "Single Assemblage", `Demographics` = "$13\\%$ Immature, $46\\%$ Female, $40\\%$ Male", `Size` = "1.00"), .(Specimen_No, Group)][, .N, .(Assemblage, Demographics, Size, Group)],
multisite_mixmod_data[, .N, .(Specimen_No, Group, Assemblage = ifelse(Site_No >= 10, paste0("Site ", Site_No), paste0("Site 0", Site_No)),
`Demographics` = ifelse(Site_No %in% 1:5, "$13\\%$ Immature, $46\\%$ Female, $40\\%$ Male", ifelse(Site_No %in% 6:10, "$20\\%$ Immature, $70\\%$ Female, $10\\%$ Male", ifelse(Site_No %in% 11:15, "$5\\%$ Immature, $35\\%$ Female, $60\\%$ Male", NA))),
`Size` = ifelse(Site_No %in% c(1:2, 6:7, 11:12), "1.00", ifelse(Site_No %in% c(3, 8, 13), "1.20", ifelse(Site_No %in% c(4, 9, 14), "0.80", ifelse(Site_No %in% c(5, 10, 15), "1.20 (Males)", NA)))))][, .N, .(Assemblage, Demographics, Size, Group)]),
Assemblage + `Demographics` + `Size` ~ Group, value.var = "N", fill = 0)
#add totals column
table_5[, Total := sum(.SD), Assemblage, .SDcols = names(table_5)[-(1:3)]]
#add in footnotes manually
table_5[Size %in% "1.20 (Males)", Size := paste0("1.20", footnote_marker_symbol(1, "latex"))]
single_assemblage_mixmod_standata <- list(
#Sample sizes
N_Specimens = single_assemblage_mixmod_data[, .N, Specimen_No][, .N],
N_Measurements = single_assemblage_mixmod_data[, .N],
N_Element_Portions = single_assemblage_mixmod_data[, .N, Element_Portion][, .N],
N_Dimensions = single_assemblage_mixmod_data[, .N, Dimension][, .N],
#Specimen observations
Element_Portion = single_assemblage_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Element_Portion],
Immature = single_assemblage_mixmod_data[, .N, .(Specimen_No, Element_Portion, Immature)][order(Specimen_No), Immature],
Immature_Proportion = as.matrix(dcast(single_assemblage_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(single_assemblage_mixmod_data[, .N, Element_Portion][, .N] + 1)],
#Measurement observations
Measurement_obs = single_assemblage_mixmod_data[, Measurement_value],
Measurement_sd = single_assemblage_mixmod_data[, Measurement_value * 0.01], #Calculate measurement error for observed measurements and reference data (1% based on data from Breslawksi and Byers 2015)
Reference_obs = single_assemblage_mixmod_data[, .N, .(Dimension, Reference_value)][order(Dimension), Reference_value],
Reference_sd = single_assemblage_mixmod_data[, .N, .(Dimension, Reference_value)][order(Dimension), Reference_value * 0.01],
Dimension = single_assemblage_mixmod_data[, Dimension],
Specimen = single_assemblage_mixmod_data[, Specimen_No],
#Demographic observations
Immature_obs = single_assemblage_demographic_observations[, N_Unfused],
Immature_obs_n = single_assemblage_demographic_observations[, N_Ageable],
Female_obs = single_assemblage_demographic_observations[, N_Female],
Female_obs_n = single_assemblage_demographic_observations[, N_Sexable],
#Prior distributions for hyper-parameters
prior_theta_raw_1 = c(-0.5, 1.5),
prior_theta_raw_2 = c(0, 1.5),
prior_mu_female = c(0, 0.1),
prior_logdelta_immature = c(-3.5, 0.4),
prior_logdelta_male = c(-2.7, 0.1),
prior_logsigma_immature = c(-3.05, 0.1),
prior_logsigma_female = c(-3.1, 0.1),
prior_logsigma_male = c(-3.1, 0.1)
)
singlesite_mixture_stanmodel <- cmdstan_model("./Scripts/LSI_mixture_model_singlesite.stan")
single_assemblage_samples <- singlesite_mixture_stanmodel$sample(
data = single_assemblage_mixmod_standata,
chains = 4,
parallel_chains = 4,
refresh = 250,
seed = 1135529301, #change seed to generalize/if the data are changed
adapt_delta = 0.90,
max_treedepth = 15
)
single_assemblage_stanfit <- rstan::read_stan_csv(single_assemblage_samples$output_files())
single_assemblage_post <- extract(single_assemblage_stanfit)
multisite_mixmod_standata <- list(
#Sample sizes
N_Sites = multisite_mixmod_data[, .N, Site_No][, .N],
N_Specimens = multisite_mixmod_data[, .N, Specimen_No][, .N],
N_Measurements = multisite_mixmod_data[, .N],
N_Element_Portions = multisite_mixmod_data[, .N, Element_Portion][, .N],
N_Dimensions = multisite_mixmod_data[, .N, Dimension][, .N],
#Specimen observations
Site = multisite_mixmod_data[, .N, .(Specimen_No, Element_Portion, Site_No, Immature)][order(Specimen_No), Site_No],
Element_Portion = multisite_mixmod_data[, .N, .(Specimen_No, Element_Portion, Site_No, Immature)][order(Specimen_No), Element_Portion],
Immature = multisite_mixmod_data[, .N, .(Specimen_No, Element_Portion, Site_No, Immature)][order(Specimen_No), Immature],
Immature_Proportion = as.matrix(dcast(multisite_mixmod_data[, .(Immature_Proportion = mean(Immature)), .(Site_No, Element_Portion)], Site_No ~ Element_Portion, value.var = "Immature_Proportion", fill = 0))[, 2:(multisite_mixmod_data[, .N, Element_Portion][, .N] + 1)],
#Measurement observations
Measurement_obs = multisite_mixmod_data[, Measurement_value],
Measurement_sd = multisite_mixmod_data[, Measurement_value * 0.01], #Calculate measurement error for observed measurements and reference data (1% based on data from Breslawksi and Byers 2015)
Reference_obs = multisite_mixmod_data[, .N, .(Dimension, Reference_value)][order(Dimension), Reference_value],
Reference_sd = multisite_mixmod_data[, .N, .(Dimension, Reference_value)][order(Dimension), Reference_value * 0.01],
Dimension = multisite_mixmod_data[, Dimension],
Specimen = multisite_mixmod_data[, Specimen_No],
#Demographic observations
N_Immature_obs = multisite_demographic_observations[, .N],
Immature_obs_site = multisite_demographic_observations[, Site_No],
Immature_obs = multisite_demographic_observations[, N_Unfused],
Immature_obs_n = multisite_demographic_observations[, N_Ageable],
N_Female_obs = multisite_demographic_observations[, .N],
Female_obs_site = multisite_demographic_observations[, Site_No],
Female_obs = multisite_demographic_observations[, N_Female],
Female_obs_n = multisite_demographic_observations[, N_Sexable],
#Prior distributions for hyper-parameters
prior_theta_raw_1 = c(-0.5, 1.5),
prior_theta_raw_2 = c(0, 1.5),
prior_mu_female = c(0, 0.2),
prior_logdelta_immature = c(-3.5, 0.5),
prior_logdelta_male = c(-2.7, 0.2),
prior_logsigma_immature = c(-3.05, 0.1),
prior_logsigma_female = c(-3.1, 0.1),
prior_logsigma_male = c(-3.1, 0.1)
)
LSI_multisite_model <- cmdstan_model("./Scripts/LSI_mixture_model_multisite.stan")
multisite_samples <- LSI_multisite_model$sample(
data = multisite_mixmod_standata,
chains = 4,
parallel_chains = 4,
refresh = 250,
adapt_delta = 0.80,
seed = 1099252793,
max_treedepth = 15
)
multisite_samples <- LSI_multisite_model$sample(
data = multisite_mixmod_standata,
chains = 1,
parallel_chains = 4,
refresh = 250,
adapt_delta = 0.80,
seed = 1099252793,
max_treedepth = 15
)
LSI_multisite_model <- cmdstan_model("./Scripts/LSI_mixture_model_multisite.stan")
multisite_samples <- LSI_multisite_model$sample(
data = multisite_mixmod_standata,
chains = 4,
parallel_chains = 4,
refresh = 250,
adapt_delta = 0.80,
seed = 1099252793,
max_treedepth = 15
)
multisite_stanfit <- rstan::read_stan_csv(multisite_samples$output_files())
multisite_post <- extract(multisite_stanfit)
